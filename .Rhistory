}
ticks <- c(0.1, 0.2, 0.5, 1, 2, 5, 10)
ggplot(odds, aes(y = OR, x = var)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = .2) +
scale_y_log10(breaks = ticks, labels = ticks) +
geom_hline(yintercept = 1, linetype = 2) +
coord_flip() +
labs(x = "Variables", y = "OR") +
theme_bw()
}
odds_ratio_plot(result.list, result.name = c("a", "b", "c"))
odds_ratio_plot <- function(result.list, result.name = NULL){
odds_ratio <- matrix(NA, nrow = length(result.list), ncol = 3)
for(i in 1:length(result.list)){
result <- result.list[[i]]
samples <- do.call(rbind, result$samples)
odds_ratio[i,] <- exp(quantile(samples[,grep("beta", colnames(samples))], c(0.025, 0.5, 0.975)))
}
odds <- as.data.frame(odds_ratio)
names(odds) <- c("lower", "OR", "upper")
if(is.null(result.name)){
odds$vars <- row.names(odds)
} else{
if(length(result.name) != length(result.list)){
stop("result.name should have same length as result.list")
}
odds$vars <- result.name
}
ticks <- c(0.1, 0.2, 0.5, 1, 2, 5, 10)
ggplot(odds, aes(y = OR, x = reorder(vars, OR))) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = .2) +
scale_y_log10(breaks = ticks, labels = ticks) +
geom_hline(yintercept = 1, linetype = 2) +
coord_flip() +
labs(x = "Variables", y = "OR") +
theme_bw()
}
odds_ratio_plot(result.list, result.name = c("a", "b", "c"))
reorder(odds$vars, odds$OR)
odds$vars
odds$vars <- c("a", "b", "CC")
reorder(odds$vars, odds$OR)
odds$vars <- c("b", "a", "CC")
reorder(odds$vars, odds$OR)
odds$OR
odd_ratio_plot(result.list, result.name = c("b", "a", "cc"))
odds_ratio_plot(result.list, result.name = c("b", "a", "cc"))
odds_ratio_plot(result.list, result.name = c("a", "b", "cc"))
odds$OR[1] <- 1
odds_ratio_plot(result.list, result.name = c("a", "b", "cc"))
odds$OR
result.name <- c("a", "b", "c")
odds_ratio <- matrix(NA, nrow = length(result.list), ncol = 3)
for(i in 1:length(result.list)){
result <- result.list[[i]]
samples <- do.call(rbind, result$samples)
odds_ratio[i,] <- exp(quantile(samples[,grep("beta", colnames(samples))], c(0.025, 0.5, 0.975)))
}
odds <- as.data.frame(odds_ratio)
names(odds) <- c("lower", "OR", "upper")
if(is.null(result.name)){
odds$vars <- row.names(odds)
} else{
if(length(result.name) != length(result.list)){
stop("result.name should have same length as result.list")
}
odds$vars <- result.name
}
ticks <- c(0.1, 0.2, 0.5, 1, 2, 5, 10)
ggplot(odds, aes(y = OR, x = reorder(vars, OR))) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = .2) +
scale_y_log10(breaks = ticks, labels = ticks) +
geom_hline(yintercept = 1, linetype = 2) +
coord_flip() +
labs(x = "Variables", y = "OR") +
theme_bw()
OR
odds
odds$OR
odds$OR[1] <- 1
odds
odds <- as.data.frame(odds_ratio)
names(odds) <- c("lower", "OR", "upper")
if(is.null(result.name)){
odds$vars <- row.names(odds)
} else{
if(length(result.name) != length(result.list)){
stop("result.name should have same length as result.list")
}
odds$vars <- result.name
}
ticks <- c(0.1, 0.2, 0.5, 1, 2, 5, 10)
ggplot(odds, aes(y = OR, x = reorder(vars, OR))) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = .2) +
scale_y_log10(breaks = ticks, labels = ticks) +
geom_hline(yintercept = 1, linetype = 2) +
coord_flip() +
labs(x = "Variables", y = "OR") +
theme_bw()
odds
odds[1,2] <-
1
odds
odds <- as.data.frame(odds_ratio)
names(odds) <- c("lower", "OR", "upper")
if(is.null(result.name)){
odds$vars <- row.names(odds)
} else{
if(length(result.name) != length(result.list)){
stop("result.name should have same length as result.list")
}
odds$vars <- result.name
}
ticks <- c(0.1, 0.2, 0.5, 1, 2, 5, 10)
ggplot(odds, aes(y = OR, x = reorder(vars, OR))) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = .2) +
scale_y_log10(breaks = ticks, labels = ticks) +
geom_hline(yintercept = 1, linetype = 2) +
coord_flip() +
labs(x = "Variables", y = "OR") +
theme_bw()
odds
odds[1,2] <- 1
if(is.null(result.name)){
odds$vars <- row.names(odds)
} else{
if(length(result.name) != length(result.list)){
stop("result.name should have same length as result.list")
}
odds$vars <- result.name
}
ticks <- c(0.1, 0.2, 0.5, 1, 2, 5, 10)
ggplot(odds, aes(y = OR, x = reorder(vars, OR))) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = .2) +
scale_y_log10(breaks = ticks, labels = ticks) +
geom_hline(yintercept = 1, linetype = 2) +
coord_flip() +
labs(x = "Variables", y = "OR") +
theme_bw()
odds_ratio <- matrix(NA, nrow = length(result.list), ncol = 3)
for(i in 1:length(result.list)){
result <- result.list[[i]]
samples <- do.call(rbind, result$samples)
mean_value <- exp(mean(samples[,grep("beta", colnames(samples))])
sd_value <- exp(sd(samples[,grep("beta", colnames(samples))])
odds_ratio[i,1] <- mean_value - qnorm((1 - level)/2, lower.tail = FALSE) * se
odds_ratio[i,2] <- mean_value
odds_ratio[i,3] <- mean_value + qnorm((1 - level)/2, lower.tail = FALSE) * se
}
odds_ratio <- matrix(NA, nrow = length(result.list), ncol = 3)
for(i in 1:length(result.list)){
result <- result.list[[i]]
samples <- do.call(rbind, result$samples)
mean_value <- exp(mean(samples[,grep("beta", colnames(samples))]))
sd_value <- exp(sd(samples[,grep("beta", colnames(samples))]))
odds_ratio[i,1] <- mean_value - qnorm((1 - level)/2, lower.tail = FALSE) * se
odds_ratio[i,2] <- mean_value
odds_ratio[i,3] <- mean_value + qnorm((1 - level)/2, lower.tail = FALSE) * se
}
level = 0.95
odds_ratio <- matrix(NA, nrow = length(result.list), ncol = 3)
for(i in 1:length(result.list)){
result <- result.list[[i]]
samples <- do.call(rbind, result$samples)
mean_value <- exp(mean(samples[,grep("beta", colnames(samples))]))
sd_value <- exp(sd(samples[,grep("beta", colnames(samples))]))
odds_ratio[i,1] <- mean_value - qnorm((1 - level)/2, lower.tail = FALSE) * se
odds_ratio[i,2] <- mean_value
odds_ratio[i,3] <- mean_value + qnorm((1 - level)/2, lower.tail = FALSE) * se
}
odds_ratio <- matrix(NA, nrow = length(result.list), ncol = 3)
for(i in 1:length(result.list)){
result <- result.list[[i]]
samples <- do.call(rbind, result$samples)
mean_value <- exp(mean(samples[,grep("beta", colnames(samples))]))
se <- exp(sd(samples[,grep("beta", colnames(samples))]))
odds_ratio[i,1] <- mean_value - qnorm((1 - level)/2, lower.tail = FALSE) * se
odds_ratio[i,2] <- mean_value
odds_ratio[i,3] <- mean_value + qnorm((1 - level)/2, lower.tail = FALSE) * se
}
odds_ratio
qnorm((1 - level)/2, lower.tail = FALSE) * se
se
odds_ratio <- matrix(NA, nrow = length(result.list), ncol = 3)
for(i in 1:length(result.list)){
result <- result.list[[i]]
samples <- do.call(rbind, result$samples)
odds_ratio[i,] <- exp(quantile(samples[,grep("beta", colnames(samples))], c(0.025, 0.5, 0.975)))
}
odds <- as.data.frame(odds_ratio)
names(odds) <- c("lower", "OR", "upper")
if(is.null(result.name)){
odds$vars <- row.names(odds)
} else{
if(length(result.name) != length(result.list)){
stop("result.name should have same length as result.list")
}
odds$vars <- result.name
}
ticks <- c(0.1, 0.2, 0.5, 1, 2, 5, 10)
ggplot(odds, aes(y = OR, x = reorder(vars, OR))) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = .2) +
scale_y_log10(breaks = ticks, labels = ticks) +
geom_hline(yintercept = 1, linetype = 2) +
coord_flip() +
labs(x = "Variables", y = "OR") +
theme_bw()
(1 -0.95)/2
1 - (1 -0.95)/2
odds_ratio_plot <- function(result.list, result.name = NULL, level = 0.95){
odds_ratio <- matrix(NA, nrow = length(result.list), ncol = 3)
for(i in 1:length(result.list)){
result <- result.list[[i]]
samples <- do.call(rbind, result$samples)
odds_ratio[i,] <- exp(quantile(samples[,grep("beta", colnames(samples))], c((1 -level)/2, 0.5, 1 - (1 -level)/2)))
}
odds <- as.data.frame(odds_ratio)
names(odds) <- c("lower", "OR", "upper")
if(is.null(result.name)){
odds$vars <- row.names(odds)
} else{
if(length(result.name) != length(result.list)){
stop("result.name should have same length as result.list")
}
odds$vars <- result.name
}
ticks <- c(0.1, 0.2, 0.5, 1, 2, 5, 10)
ggplot(odds, aes(y = OR, x = reorder(vars, OR))) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = .2) +
scale_y_log10(breaks = ticks, labels = ticks) +
geom_hline(yintercept = 1, linetype = 2) +
coord_flip() +
labs(x = "Variables", y = "OR") +
theme_bw()
}
odds_ratio_plot(result.list, result.name = c("a", "b", "c"))
odds_ratio_plot(result.list, result.name = c("b", "b", "c"))
odds_ratio_plot(result.list, result.name = c("b", "d", "c"))
library(devtools)
install_github("MikeJSeo/nof1", force = TRUE)
library(nof1)
odds_ratio_plot
odds_ratio_plot(result.list, result.name = c("average pain", "fatigure", "enjoyment of life"))
odds_ratio_plot(result.list, result.name = c("average pain", "fatigue", "enjoyment of life"))
odds_ratio_plot(result.list, result.name = c("fafa", "fatigue", "enjoyment of life"))
result.list <- list(result = result, result2 = result2, result3 = result3)
odds_ratio_plot(result.list, result.name = c("fafa", "fatigue", "enjoyment of life"))
tt <- 1:16
plot(tt, 0.5 * exp(-tt * 0.1))
plot(tt, 0.5 * exp(-tt * 0.2))
plot(tt, 0.5 * exp(-tt * 0.01))
library(rjags)
Study <- rep(1:17, each = 2)
Treat <- c(1,3,1,3,1,3,1,3,1,2,1,3,1,3,2,3,1,3,1,3,2,3,1,3,2,3,1,2,1,2,2,3,1,2)
Outcomes <- matrix(c(3869,4014,8760,8941,2607,2593,4544,4539,1329,1367,2155,2149,1967,2039,4075,4073,1882,1901,3158,3196,4724,4711,3224,3224,640,644,3887,3811,4925,4983,2102,2161,1131,1141,200,167,570,547,149,163,341,336,45,36,113,138,49,46,156,143,66,68,62,56,127,158,52,63,15,10,61,44,130,111,21,21,31,32,433,331,937,781,157,135,300,295,37,25,98,78,207,136,218,223,130,112,73,50,155,126,25,17,20,22,18,11,82,74,109,83,37,38), ncol = 3)
covariate <- c(1,2,4,2,3,5,6,7,8,1,12,2,3,4,2,3,4)
colnames(Outcomes) <- c("Alive", "FnCVD", "FCVD")
#Outcomes <- Outcomes[,c(2,1,3)]
N <- apply(Outcomes, 1, sum)
network <- network.data(Outcomes, Study, Treat, N, response = "multinomial", covariate = covariate, covariate.model = "exchangeable")
library(devtools)
install_github("MikeJSeo/network-meta")
library(mcnet)
network <- network.data(Outcomes, Study, Treat, N, response = "multinomial", covariate = covariate, covariate.model = "exchangeable")
result <- network.run(network)
network <- network.data(Outcomes, Study, Treat, N, response = "multinomial", type = "fixed")
cat(network$code)
network <- network.data(Outcomes, Study, Treat, N, response = "multinomial", baseline = "common", baseline.risk = "exchangeable")
cat(network$code)
network$mx_bl
str(network)
####### manual generation
pack <- "mcnet"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
devtools::document()
setwd("C:/Users/Michael Seo/Desktop/GitHub/network-meta")
devtools::document()
####### manual generation
pack <- "mcnet"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
####### manual generation
pack <- "mcnet"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
devtools::document()
####### manual generation
pack <- "mcnet"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
####### manual generation
pack <- "mcnet"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
devtools::document()
####### manual generation
pack <- "mcnet"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
devtools::document()
####### manual generation
pack <- "mcnet"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
devtools::document()
####### manual generation
pack <- "mcnet"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
library(rjags)
Outcomes <- c(-1.22, -1.53, -0.7, -2.4, -0.3, -2.6, -1.2, -0.24, -0.59, -0.73, -0.18, -2.2, -2.5, -1.8, -2.1)
SE <- c(0.504, 0.439, 0.282, 0.258, 0.505, 0.510, 0.478, 0.265, 0.354, 0.335, 0.442, 0.197, 0.190, 0.200, 0.250)
Treat <- c(1, 3, 1, 2, 1, 2, 4, 3, 4, 3, 4, 4, 5, 4, 5)
covariate <- c(1,3,4,2,5,6,7)
#covariate <- cbind(c(1,3,4,2,5,6,7), c(1,2,2,2,3,4,5)) #fake covariate
Study <- c(1, 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7)
network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, SE = SE, response = "normal", covariate = covariate, covariate.model = "exchangeable", hy.prior.cov = list("dgamma", 0.001, 0.001))
result <- network.run(network)
library(rjags)
Study <- rep(1:17, each = 2)
Treat <- c(1,3,1,3,1,3,1,3,1,2,1,3,1,3,2,3,1,3,1,3,2,3,1,3,2,3,1,2,1,2,2,3,1,2)
Outcomes <- matrix(c(3869,4014,8760,8941,2607,2593,4544,4539,1329,1367,2155,2149,1967,2039,4075,4073,1882,1901,3158,3196,4724,4711,3224,3224,640,644,3887,3811,4925,4983,2102,2161,1131,1141,200,167,570,547,149,163,341,336,45,36,113,138,49,46,156,143,66,68,62,56,127,158,52,63,15,10,61,44,130,111,21,21,31,32,433,331,937,781,157,135,300,295,37,25,98,78,207,136,218,223,130,112,73,50,155,126,25,17,20,22,18,11,82,74,109,83,37,38), ncol = 3)
covariate <- c(1,2,4,2,3,5,6,7,8,1,12,2,3,4,2,3,4)
colnames(Outcomes) <- c("Alive", "FnCVD", "FCVD")
#Outcomes <- Outcomes[,c(2,1,3)]
N <- apply(Outcomes, 1, sum)
network <- network.data(Outcomes, Study, Treat, N, response = "multinomial", covariate = covariate, covariate.model = "exchangeable")
result <- network.run(network)
network.deviance.plot(result)
network.forest.plot(result)
network.forest.plot(result, level = 0.7)
c(0.93, 0.67, 1.30)
network.forest.plot(result)
network.forest.plot(result, level = 0.5)
library(devtools)
install_github("MikeJSeo/nof1")
library(nof1)
nof1.ordinal.simulation <- function(baseline = "baseline",  Base.size = 100, Treat.size = 100,
beta_A = -0.1, beta_B = -0.3, cut = c(0.5,1,1.5,2), ncat = 5){
inv_logit <- function(a){
exp(a)/(1 + exp(a))
}
Treat <- rep(baseline, Base.size)
Treat <- c(Treat, rep(c("B", "A", "B", "A"), each = Treat.size))
Time <- 1:length(Treat)
nobs <- length(Time)
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- 0
if(Treat[i] == "A"){
mu[i] <- mu[i] + beta_A
} else if (Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat, nobs = nobs)
}
data <- nof1.ordinal.simulation() #generated data
nof1 <- with(data, {
nof1.data(Y, Treat, ncat = 5, baseline = "baseline", response = "ordinal")
})
cat(nof1$code) #rjags code
result <- nof1.run(nof1)
summary(result$samples)
data
help(ordsample)
cat(nof1$code)
inv_logit <- function(a){
exp(a)/(1 + exp(a))
}
aa <- seq(-2, 2, length.out = 1000)
plot(aa, inv_logit(aa))
network.forest.plot(result)
library(rjags)
Study <- rep(1:17, each = 2)
Treat <- c(1,3,1,3,1,3,1,3,1,2,1,3,1,3,2,3,1,3,1,3,2,3,1,3,2,3,1,2,1,2,2,3,1,2)
Outcomes <- matrix(c(3869,4014,8760,8941,2607,2593,4544,4539,1329,1367,2155,2149,1967,2039,4075,4073,1882,1901,3158,3196,4724,4711,3224,3224,640,644,3887,3811,4925,4983,2102,2161,1131,1141,200,167,570,547,149,163,341,336,45,36,113,138,49,46,156,143,66,68,62,56,127,158,52,63,15,10,61,44,130,111,21,21,31,32,433,331,937,781,157,135,300,295,37,25,98,78,207,136,218,223,130,112,73,50,155,126,25,17,20,22,18,11,82,74,109,83,37,38), ncol = 3)
covariate <- c(1,2,4,2,3,5,6,7,8,1,12,2,3,4,2,3,4)
colnames(Outcomes) <- c("Alive", "FnCVD", "FCVD")
#Outcomes <- Outcomes[,c(2,1,3)]
N <- apply(Outcomes, 1, sum)
network <- network.data(Outcomes, Study, Treat, N, response = "multinomial", covariate = covariate, covariate.model = "exchangeable")
result <- network.run(network)
network.forest.plot(result)
relative.effects.table(result, summary_stat = "quantile", probs = 0.95)
relative.effects.table(result, summary_stat = "quantile", probs = 0.90)
relative.effects.table(result, summary_stat = "quantile", probs = 0.50)
relative.effects.table(result, summary_stat = "quantile", probs = 0.30)
network.forest.plot(result, level = 0.95)
network.forest.plot(result, level = 0.90)
1.23
network.forest.plot(result, level = 0.95)
network.forest.plot(result, level = 0.7)
0.79
network.forest.plot(result, level = 0.95)
network.forest.plot(result, level = 0.7)
c(0.79, 1.11)
network.forest.plot(result, level = 0.95)
network.forest.plot(result, label.margin = 12)
network.forest.plot(result, label.margin = 15)
network.forest.plot(result, label.margin = 6)
network.forest.plot(result, label.margin = 10)
network <- with(statins, {
network.data(Outcomes, Study, Treat, N = N, response = "binomial",
Treat.order = c("Placebo", "Statin"), covariate = covariate, covariate.type = "discrete")
})
result <- network.run(network)
network.gelman.diag(result, extra.pars = "Eta")
network <- with(statins, {
network.data(Outcomes, Study, Treat, N = N, response = "binomial",
Treat.order = c("Placebo", "Statin"), covariate = covariate, covariate.type = "discrete")
})
result <- network.run(network)
network.gelman.diag(result)
cat(network$code)
0.5/0.6
0.7/0.6
(0.7/(1-0.7))/(0.6/(1-0.6))
network.gelman.diag(result)
network.gelman.plot(result)
summary(result)
devtools::document()
help(combn)
network.gelman.diag(result)
network.gelman.diag(result)
network.gelman.plot(result)
network.leverage.plot(result)
network.rank.tx.plot(result)
sucra(result)
network$plot(result, only.pars = "sd")
plot(result, only.pars = "sd")
plot(result)
rank.tx(result)
devtools::document()
devtools::check(args = c('--no-examples'),manual = TRUE)
devtools::document()
devtools::check(args = c('--no-examples'),manual = TRUE)
####### manual generation
pack <- "mcnet"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
devtools::document
devtools::document()
####### manual generation
pack <- "mcnet"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
devtools::document()
####### manual generation
pack <- "mcnet"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
####### manual generation
pack <- "mcnet"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
network$data
network.forest.plot(result)
####### manual generation
pack <- "mcnet"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
devtools::document()
####### manual generation
pack <- "mcnet"
path <- find.package(pack)
system(paste(shQuote(file.path(R.home("bin"), "R")),
"CMD", "Rd2pdf", shQuote(path)))
.libPaths()
lapply(.libPaths(), dir)
dir
help(dir)
library(devtools)
install_github("MikeJSeo/network-meta")
library(mcnet)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
grid
