nobs <- length(Treat)
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- alpha
if(Treat[i] == "A"){
mu[i] <- mu[i] + beta_A
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat)
}
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Laughter", "Usual Routine")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 11, baseline = "Laughter", response = "ordinal")
cat(nof1$code)
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y")
time_series_plot2 <- function(nof1, time = NULL, timestamp = NULL, timestamp.format = "%m/%d/%Y %H:%M"){
# if(!is.null(time)){
#   time_difference <- time
# } else if(is.null(timestamp)){
#   time_difference <- 1:length(nof1$Y)
# } else if(!is.null(timestamp)){
#   first_timestamp <- strptime(timestamp[1], timestamp.format)
#
#   time_difference <- rep(NA, length(timestamp))
#   time_difference[1] <- 1
#   for(i in 2:length(timestamp)){
#     second_timestamp <- strptime(timestamp[i], timestamp.format)
#     time_difference[i] <- round(1 + as.numeric(difftime(second_timestamp, first_timestamp, units = "days")))
#   }
# }
date <- as.Date(timestamp, timestamp.format)
data <- data.frame(Y = as.numeric(nof1$Y), Treatment = gsub("\\_", " ", nof1$Treat), date = date)
data2 <- aggregate(nof1$Y, list(Treatment = gsub("\\_", " ", nof1$Treat)), mean)
ggplot(data, aes(x=date, Y, fill = Treatment)) + geom_bar(stat = "identity")  + facet_grid(. ~ Treatment) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(x = "Date", y = "Stress") + #theme(legend.position = "none") +
geom_hline(data = data2, aes(yintercept = x, linetype = "Mean"), color="black") + theme(plot.title = element_text(hjust = 0.5)) +
scale_y_continuous(breaks = 0:nof1$ncat, oob = rescale_none, label = c("Low", rep("", length = nof1$ncat -1), "High")) +
scale_fill_manual(values=c("#adc2eb", "#ffb380")) +
scale_linetype_manual(name = "", values = 1, guide = guide_legend(override.aes = list(color = c("black"))))
}
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y")
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y")
summary(result)
summary(result$samples)
date <- as.Date(timestamp, timestamp.format)
data <- data.frame(Y = as.numeric(nof1$Y), Treatment = gsub("\\_", " ", nof1$Treat), date = date)
data2 <- aggregate(nof1$Y, list(Treatment = gsub("\\_", " ", nof1$Treat)), mean)
ggplot(data, aes(x=date, Y, fill = Treatment)) + geom_bar(stat = "identity")  + facet_grid(. ~ Treatment) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(x = "Date", y = "Stress") +
geom_hline(data = data2, aes(yintercept = x, linetype = "Mean"), color="black") + theme(plot.title = element_text(hjust = 0.5)) +
scale_y_continuous(breaks = 0:nof1$ncat, oob = rescale_none, label = c("Low", rep("", length = nof1$ncat -1), "High")) +
scale_fill_manual(values=c("#adc2eb", "#ffb380")) +
scale_linetype_manual(name = "", values = 1, guide = guide_legend(override.aes = list(color = c("black"))))
ggplot(data, aes(x=date, Y, fill = Treatment)) + geom_bar(stat = "identity")  + facet_grid(. ~ Treatment) +
#theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(x = "Date", y = "Stress") +
geom_hline(data = data2, aes(yintercept = x, linetype = "Mean"), color="black") + theme(plot.title = element_text(hjust = 0.5)) +
scale_y_continuous(breaks = 0:nof1$ncat, oob = rescale_none, label = c("Low", rep("", length = nof1$ncat -1), "High")) +
scale_fill_manual(values=c("#adc2eb", "#ffb380")) +
scale_linetype_manual(name = "", values = 1, guide = guide_legend(override.aes = list(color = c("black"))))
ggplot(data, aes(x=date, Y, fill = Treatment)) + geom_bar(stat = "identity")  + facet_grid(. ~ Treatment) +
theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(x = "Date", y = "Stress") +
geom_hline(data = data2, aes(yintercept = x, linetype = "Mean"), color="black") + theme(plot.title = element_text(hjust = 0.5)) +
scale_y_continuous(breaks = 0:nof1$ncat, oob = rescale_none, label = c("Low", rep("", length = nof1$ncat -1), "High")) +
scale_fill_manual(values=c("#adc2eb", "#ffb380")) +
scale_linetype_manual(name = "", values = 1, guide = guide_legend(override.aes = list(color = c("black"))))
time_series_plot2 <- function(nof1, time = NULL, timestamp = NULL, timestamp.format = "%m/%d/%Y %H:%M", Outcome.name = ""){
# if(!is.null(time)){
#   time_difference <- time
# } else if(is.null(timestamp)){
#   time_difference <- 1:length(nof1$Y)
# } else if(!is.null(timestamp)){
#   first_timestamp <- strptime(timestamp[1], timestamp.format)
#
#   time_difference <- rep(NA, length(timestamp))
#   time_difference[1] <- 1
#   for(i in 2:length(timestamp)){
#     second_timestamp <- strptime(timestamp[i], timestamp.format)
#     time_difference[i] <- round(1 + as.numeric(difftime(second_timestamp, first_timestamp, units = "days")))
#   }
# }
date <- as.Date(timestamp, timestamp.format)
data <- data.frame(Y = as.numeric(nof1$Y), Treatment = gsub("\\_", " ", nof1$Treat), date = date)
data2 <- aggregate(nof1$Y, list(Treatment = gsub("\\_", " ", nof1$Treat)), mean)
ggplot(data, aes(x=date, Y, fill = Treatment)) + geom_bar(stat = "identity")  + facet_grid(. ~ Treatment) + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(x = "Date", y = Outcome.name) +
geom_hline(data = data2, aes(yintercept = x, linetype = "Mean"), color="black") + theme(plot.title = element_text(hjust = 0.5)) +
scale_y_continuous(breaks = 0:nof1$ncat, oob = rescale_none, label = c("Low", rep("", length = nof1$ncat -1), "High")) +
scale_fill_manual(values=c("#adc2eb", "#ffb380")) +
scale_linetype_manual(name = "", values = 1, guide = guide_legend(override.aes = list(color = c("black"))))
}
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y")
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
data2 <- nof1.ordinal.simulation2(beta_A = 0.5)
Treat <- ifelse(data$Treat == "A", "Laughter", "Usual Routine")
Y <- data$Y
nof12 <- nof1.data(Y, Treat, ncat = 11, baseline = "Laughter", response = "ordinal")
data2 <- nof1.ordinal.simulation2(beta_A = 0.5)
Treat2 <- ifelse(data2$Treat == "A", "Laughter", "Usual Routine")
Y2 <- data2$Y
nof12 <- nof1.data(Y2, Treat2, ncat = 11, baseline = "Laughter", response = "ordinal")
time_series_plot2(nof12, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
time_series_plot2(nof12, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
data2 <- nof1.ordinal.simulation2(beta_A = 1)
Treat2 <- ifelse(data2$Treat == "A", "Laughter", "Usual Routine")
Y2 <- data2$Y
nof12 <- nof1.data(Y2, Treat2, ncat = 11, baseline = "Laughter", response = "ordinal")
result2 <- nof1.run(nof12)
data2 <- nof1.ordinal.simulation2(beta_A = 1)
Treat2 <- ifelse(data2$Treat == "A", "Laughter", "Usual Routine")
Y2 <- data2$Y
nof12 <- nof1.data(Y2, Treat2, ncat = 11, baseline = "Laughter", response = "ordinal")
time_series_plot2(nof12, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
time_series_plot2(nof12, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
data2 <- nof1.ordinal.simulation2(beta_A = 2)
Treat2 <- ifelse(data2$Treat == "A", "Laughter", "Usual Routine")
Y2 <- data2$Y
nof12 <- nof1.data(Y2, Treat2, ncat = 11, baseline = "Laughter", response = "ordinal")
time_series_plot2(nof12, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
time_series_plot2(nof12, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
result2 <- nof1.run(nof12)
summary(result2$samples)
nof1.ordinal.simulation2 <- function(alpha = 0, beta_A = -0.1, cut = c(-0.5,-0.4,-0.2,-0.1,0.1, 0.2, 0.7, 0.9, 1, 1.1, 1.3), ncat = 11){
inv_logit <- function(a){
1/(1+exp(-a))
}
Treat <-  rep(c("A", "B", "A", "B", "A", "B"), each = 100)
nobs <- length(Treat)
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- alpha
if(Treat[i] == "A"){
mu[i] <- mu[i] + beta_A
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat)
}
data2 <- nof1.ordinal.simulation2(beta_A = 2)
Treat2 <- ifelse(data2$Treat == "A", "Laughter", "Usual Routine")
Y2 <- data2$Y
nof12 <- nof1.data(Y2, Treat2, ncat = 11, baseline = "Laughter", response = "ordinal")
result2 <- nof1.run(nof12)
summary(result2$samples)
nof1.ordinal.simulation2 <- function(alpha = 0, beta_B = -0.1, cut = c(-0.5,-0.4,-0.2,-0.1,0.1, 0.2, 0.7, 0.9, 1, 1.1, 1.3), ncat = 11){
inv_logit <- function(a){
1/(1+exp(-a))
}
x
Treat <-  rep(c("A", "B", "A", "B", "A", "B"), each = 10)
nobs <- length(Treat)
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- alpha
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat)
data2 <- nof1.ordinal.simulation2(beta_A = 1)
Treat2 <- ifelse(data2$Treat == "A", "Usual_Routine","Laughter")
Y2 <- data2$Y
nof12 <- nof1.data(Y2, Treat2, ncat = 11, baseline = "Usual_Routine", response = "ordinal")
nof1.ordinal.simulation2 <- function(alpha = 0, beta_B = -0.1, cut = c(-0.5,-0.4,-0.2,-0.1,0.1, 0.2, 0.7, 0.9, 1, 1.1, 1.3), ncat = 11){
inv_logit <- function(a){
1/(1+exp(-a))
}
x
Treat <-  rep(c("A", "B", "A", "B", "A", "B"), each = 10)
nobs <- length(Treat)
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- alpha
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat)
}
data2 <- nof1.ordinal.simulation2(beta_A = 1)
data2 <- nof1.ordinal.simulation2(beta_B = 1)
nof1.ordinal.simulation2 <- function(alpha = 0, beta_B = -0.1, cut = c(-0.5,-0.4,-0.2,-0.1,0.1, 0.2, 0.7, 0.9, 1, 1.1, 1.3), ncat = 11){
inv_logit <- function(a){
1/(1+exp(-a))
}
x
Treat <-  rep(c("A", "B", "A", "B", "A", "B"), each = 10)
nobs <- length(Treat)
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- alpha
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat)
}
data2 <- nof1.ordinal.simulation2(beta_B = 1)
nof1.ordinal.simulation2 <- function(alpha = 0, beta_B = -0.1, cut = c(-0.5,-0.4,-0.2,-0.1,0.1, 0.2, 0.7, 0.9, 1, 1.1, 1.3), ncat = 11){
inv_logit <- function(a){
1/(1+exp(-a))
}
Treat <-  rep(c("A", "B", "A", "B", "A", "B"), each = 10)
nobs <- length(Treat)
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- alpha
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat)
}
data2 <- nof1.ordinal.simulation2(beta_B = 1)
Treat2 <- ifelse(data2$Treat == "A", "Usual_Routine","Laughter")
Y2 <- data2$Y
nof12 <- nof1.data(Y2, Treat2, ncat = 11, baseline = "Usual_Routine", response = "ordinal")
result2 <- nof1.run(nof12)
summary(result2$samples)
time_series_plot2(nof12, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
time_series_plot2(nof12, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
cat(nof12)
nof12
cat(nof12$code)
date <- as.Date(timestamp, timestamp.format)
data <- data.frame(Y = as.numeric(nof1$Y), Treatment = gsub("\\_", " ", nof1$Treat), date = date)
data2 <- aggregate(nof1$Y, list(Treatment = gsub("\\_", " ", nof1$Treat)), mean)
data
nof1.ordinal.simulation2 <- function(alpha = 0, beta_B = -0.1, cut = c(-0.5,-0.4,-0.2,-0.1,0.1, 0.2, 0.7, 0.9, 1, 1.1, 1.3), ncat = 11){
inv_logit <- function(a){
1/(1+exp(-a))
}
Treat <-  rep(c("A", "B", "A", "B", "A", "B"), each = 3)
nobs <- length(Treat)
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- alpha
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat)
}
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Laughter", "Usual Routine")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 11, baseline = "Laughter", response = "ordinal")
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
summary(result$samples)
nof1.ordinal.simulation2 <- function(alpha = 0, beta_B = -0.1, cut = c(-0.5,-0.4,-0.2,-0.1,0.1, 0.2, 0.7, 0.9, 1, 1.1, 1.3), ncat = 11){
inv_logit <- function(a){
1/(1+exp(-a))
}
Treat <-  rep(c("A", "B", "A", "B", "A", "B"), each = 3)
nobs <- length(Treat)
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- alpha
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat)
}
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Laughter", "Usual Routine")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 11, baseline = "Laughter", response = "ordinal")
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
summary(result$samples)
nof1.ordinal.simulation2 <- function(alpha = 0, beta_B = -0.1, cut = c(-0.5, 0.3, 0.5, 0.8, 1), ncat = 5){
#cut = c(-0.5,-0.4,-0.2,-0.1,0.1, 0.2, 0.7, 0.9, 1, 1.1, 1.3), ncat = 11){
inv_logit <- function(a){
1/(1+exp(-a))
}
Treat <-  rep(c("A", "B", "A", "B", "A", "B"), each = 3)
nobs <- length(Treat)
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- alpha
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat)
}
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Laughter", "Usual Routine")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 11, baseline = "Laughter", response = "ordinal")
result <- nof1.run(nof1)
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Laughter", "Usual Routine")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Laughter", response = "ordinal")
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
summary(result$samples)
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
summary(result$samples)
cat(nof1$code)
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
cat(nof1$code)
Treat
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
cat(nof1$code)
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual_Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual_Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual_Routine", response = "ordinal")
cat(nof1$code)
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
str(nof1)
nof1.data <- function(Y, Treat, baseline = "baseline", ncat = NULL, response = NULL, Time=NULL, knots = NULL,
alpha.prior = NULL, beta.prior = NULL, gamma.prior = NULL, dc.prior = NULL, c1.prior = NULL,
rho.prior = NULL, hy.prior = NULL){
if(response == "ordinal"){
if(is.null(ncat)){
stop("ncat (number of categories) must be entered for ordinal response")
}
}
nobs <- length(Y)
if(!baseline %in% Treat){
stop("baseline treatment name is not in Treat")
}
Treat <- gsub(" ", "\\_", Treat)
baseline <- gsub(" ", "\\_", baseline)
# if(length(strsplit(Treat, " ")[[1]]) != 1){
#   stop("Treatment names cannot contain space")
# }
Treat.name <- unique(Treat)
Treat.name <- Treat.name[Treat.name != baseline]
nof1 = list(Y = Y, Treat = Treat, baseline = baseline, ncat = ncat, nobs = nobs, Treat.name = Treat.name, response = response)
if(!is.null(Time)){
cen.Time <- (Time - mean(Time, na.rm = TRUE)) / sd(Time, na.rm = TRUE)
nof1$Time = cen.Time
}
if(!is.null(knots)){
cen.knots <- (knots - mean(Time, na.rm = TRUE))/ sd(Time, na.rm = TRUE)
BS <- bs(cen.Time, knots = cen.knots)
nof1$BS <- BS
nof1$knots <- knots
}
for(i in Treat.name){
nam <- paste("Treat_", i, sep = "")
nam <- assign(nam, as.numeric(Treat == i))
nof1[[ paste("Treat_", i, sep = "")]] <- nam
}
prior.param <- list(response = response, dc.prior = dc.prior, c1.prior = c1.prior, alpha.prior = alpha.prior, beta.prior = beta.prior, gamma.prior = gamma.prior, hy.prior = hy.prior, rho.prior = rho.prior)
prior.data <- nof1.prior.default(prior.param)
nof1 <- c(nof1, prior.data)
code <- nof1.rjags(nof1)
nof1$code <- code
class(nof1) <- "nof1.data"
nof1
}
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
library(devtools)
install_github("MikeJSeo/nof1", force = TRUE)
library(nof1)
library(scales)
library(ggplot2)
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
remove(list = ls())
install_github("MikeJSeo/nof1", force = TRUE)
library(nof1)
library(scales)
library(ggplot2)
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
result <- nof1.run(nof1)
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
cat(nof1$code)
nof1.data
