contrast.network.data(Outcomes, Treat, SE, na, V, type = "random")
})
result <- contrast.network.run(network)
network$hy.prior[[3]]
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random")
})
result <- contrast.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random")
})
result <- contrast.network.run(network)
str(network)
cat(network$code)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random")
})
result <- contrast.network.run(network)
cat(network$code)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random")
})
result <- contrast.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
devtools::document()
setwd("C:/Users/Michael Seo/Desktop/GitHub/network-meta")
devtools::document()
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random")
})
result <- contrast.network.run(network)
summary(result)
result$inits
str(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "fix")
})
result <- contrast.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "fixed")
})
result <- contrast.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "fixed")
})
result <- contrast.network.run(network)
summary(result)
str(network)
cat(network$code)
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random")
})
result <- contrast.network.run(network)
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random")
})
result <- contrast.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random")
})
result <- contrast.network.run(network)
summary(result)
result$inits
cat(network$code)
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", hy.prior = list("dgamma", 0.01, 0.01))
})
result <- contrast.network.run(network)
cat(network$code)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", hy.prior = list("dgamma", 0.01, 0.01))
})
result <- contrast.network.run(network)
summary(result)
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
cat(network$code)
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
summary(result)
result$inits
cat(network$code)
str(result)
result$max.gelman
network.gelman.plot(result)
network.gelman.diag(result)
network.autocorr.diag(result)
str(result)
newwork.autocorr.plot(result)
network.autocorr.plot(result)
relative.effects(result)
network$responpse
network$response
class(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
relative.effects(result)
relative.effects
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
relative.effects(result)
sucra(result)
contrast.calculate.deviance
cnetwork.deviance.plot(result)
network.deviance.plot(result)
network.forest.plot(result)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
relative.effects(result)
network <- result$network
if(!is.null(covariate)){
stopifnot(length(covariate) == dim(network$covariate)[2])
}
Treat.order <- network$Treat.order
if(!is.null(base.treatment)){
stopifnot(base.treatment %in% Treat.order)
} else{
base.treatment <- Treat.order[1]
}
if(!is.null(comparison.treatments)){
stopifnot(comparison.treatments %in% Treat.order)
stopifnot(!comparison.treatments %in% base.treatment)
} else{
comparison.treatments <- Treat.order[-which(Treat.order == base.treatment)]
}
if(!is.null(covariate)){
summary.samples <- pick.summary.variables(result, only.pars = c("d", "beta"))
} else{
summary.samples <- pick.summary.variables(result, only.pars = c("d"))
}
vars <- dimnames(summary.samples[[1]])[[2]]
base.Treament = NULL
comparison.treatments = NULL
network <- result$network
if(!is.null(covariate)){
stopifnot(length(covariate) == dim(network$covariate)[2])
}
Treat.order <- network$Treat.order
if(!is.null(base.treatment)){
stopifnot(base.treatment %in% Treat.order)
} else{
base.treatment <- Treat.order[1]
}
base.Treatment = NULL
network <- result$network
if(!is.null(covariate)){
stopifnot(length(covariate) == dim(network$covariate)[2])
}
Treat.order <- network$Treat.order
if(!is.null(base.treatment)){
stopifnot(base.treatment %in% Treat.order)
} else{
base.treatment <- Treat.order[1]
}
base.treatment = NULL
network <- result$network
if(!is.null(covariate)){
stopifnot(length(covariate) == dim(network$covariate)[2])
}
Treat.order <- network$Treat.order
if(!is.null(base.treatment)){
stopifnot(base.treatment %in% Treat.order)
} else{
base.treatment <- Treat.order[1]
}
if(!is.null(comparison.treatments)){
stopifnot(comparison.treatments %in% Treat.order)
stopifnot(!comparison.treatments %in% base.treatment)
} else{
comparison.treatments <- Treat.order[-which(Treat.order == base.treatment)]
}
if(!is.null(covariate)){
summary.samples <- pick.summary.variables(result, only.pars = c("d", "beta"))
} else{
summary.samples <- pick.summary.variables(result, only.pars = c("d"))
}
vars <- dimnames(summary.samples[[1]])[[2]]
summary.samples <- pick.summary.variables(result, only.pars = c("d", "beta"))
covariate
covariate=  NULL
if(!is.null(covariate)){
summary.samples <- pick.summary.variables(result, only.pars = c("d", "beta"))
} else{
summary.samples <- pick.summary.variables(result, only.pars = c("d"))
}
is.null(covariate)
if(!is.null(covariate)){
summary.samples <- pick.summary.variables(result, only.pars = c("d", "beta"))
} else{
summary.samples <- pick.summary.variables(result, only.pars = c("d"))
}
pick.summary.variables <- function(result, extra.pars = NULL, only.pars = NULL){
samples <- result[["samples"]]
varnames <- dimnames(samples[[1]])[[2]]
varnames.split <- sapply(strsplit(varnames, "\\["), '[[', 1)
varnames.split <- gsub("[[:digit:]]","",varnames.split)
if(!is.null(only.pars)){
if(!all(only.pars %in% varnames.split)){
stop(paste0(only.pars, "was not sampled"))
}
}
if(is.null(only.pars)){
pars <- c("d", "sd", "sigma", "b_bl", "beta", "B", "sdB")
} else{
pars <- only.pars
}
if(!is.null(extra.pars)){
if(!extra.pars %in% varnames.split){
stop(paste0(extra.pars, " is not saved in result"))
}
pars <- c(pars, extra.pars)
}
summary.samples <- lapply(samples, function(x){x[,varnames.split %in% pars, drop = F]})
summary.samples <- coda::mcmc.list(summary.samples)
summary.samples
}
if(!is.null(covariate)){
summary.samples <- pick.summary.variables(result, only.pars = c("d", "beta"))
} else{
summary.samples <- pick.summary.variables(result, only.pars = c("d"))
}
network <- result$network
if(!is.null(covariate)){
stopifnot(length(covariate) == dim(network$covariate)[2])
}
Treat.order <- network$Treat.order
if(!is.null(base.treatment)){
stopifnot(base.treatment %in% Treat.order)
} else{
base.treatment <- Treat.order[1]
}
if(!is.null(comparison.treatments)){
stopifnot(comparison.treatments %in% Treat.order)
stopifnot(!comparison.treatments %in% base.treatment)
} else{
comparison.treatments <- Treat.order[-which(Treat.order == base.treatment)]
}
if(!is.null(covariate)){
summary.samples <- pick.summary.variables(result, only.pars = c("d", "beta"))
} else{
summary.samples <- pick.summary.variables(result, only.pars = c("d"))
}
vars <- dimnames(summary.samples[[1]])[[2]]
vars_d <- vars[grep("d\\[", vars)]
categories_row <- as.numeric(substr(vars_d, nchar(vars_d[1])-1, nchar(vars_d[1])-1))
categories_row <- categories_row+1
ncat <- network$ncat
vars_d
if(!is.null(base.category)){
stopifnot(base.category %in% 1:ncat)
} else{
base.category <- 1
}
if(!is.null(comparison.categories)){
stopifnot(comparison.categories %in% 1:ncat)
stopifnot(!comparison.categories %in% base.category)
} else{
comparison.categories <- (1:ncat)[-base.category]
}
effects <- matrix(0, nrow = network$ntreat, ncol = length(comparison.treatments))
effects[which(Treat.order == base.treatment),] = -1
col_name = NULL
for(i in 1:ncol(effects)){
effects[which(comparison.treatments[i] == Treat.order),i] = 1
col_name <- c(col_name, paste0("d_treatment", base.treatment, comparison.treatments[i]))
}
if(!is.null(covariate)){
cov_matrix <-  covariate_centerered  <- NULL
for(i in 1:length(covariate)){
cov <- effects
covariate_centered <- covariate[i] - network[[paste0("mx",i)]]
cov <- cov * covariate_centered
cov_matrix <- rbind(cov_matrix, cov)
}
effects <- rbind(cov_matrix, effects)
}
colnames(effects) <- col_name
rownames(effects) <- vars
samples <- as.mcmc.list(lapply(summary.samples, function(chain){
samples <- chain %*% effects
colnames(samples) <- colnames(effects)
mcmc(samples, start = start(chain), end = end(chain), thin = thin(chain))
}))
samples
samples <- as.mcmc.list(lapply(summary.samples, function(chain){
samples <- chain %*% effects
colnames(samples) <- colnames(effects)
mcmc(samples, start = start(chain), end = end(chain), thin = thin(chain))
str(samples)
View(samples)
relative.effects(result)
comparison.treatments
effects <- matrix(0, nrow = network$ntreat, ncol = length(comparison.treatments))
effects[which(Treat.order == base.treatment),] = -1
effects
if(!is.null(covariate)){
stopifnot(length(covariate) == dim(network$covariate)[2])
}
Treat.order <- network$Treat.order
if(!is.null(base.treatment)){
stopifnot(base.treatment %in% Treat.order)
} else{
base.treatment <- Treat.order[1]
}
if(!is.null(comparison.treatments)){
stopifnot(comparison.treatments %in% Treat.order)
stopifnot(!comparison.treatments %in% base.treatment)
} else{
comparison.treatments <- Treat.order[-which(Treat.order == base.treatment)]
}
comparison.treatments
Treat.order
unique(Treat)
unique(unlist(Treat))
unique(c(Treat))
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
relative.effects(result)
network$Treat.order
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
network$Treat
network$Treat.order
relative.effects(result)
relative.effects.table(result)
rank.tx(result)
sucra(result)
calculate.deviance(result)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
calculate.deviance(result)
network.forest.plot(result)
setwd("C:/Users/Michael Seo/Desktop/GitHub/network-meta")
getwd()
