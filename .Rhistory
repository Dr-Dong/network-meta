{
EU.treat <- prev*(U.D.treat-Udec.treat)+(1-prev)*(U.noD.treat)
EU.notreat <-prev*(U.D.notreat)+(1-prev)*(U.noD.notreat)
EU.test <-prev*(sens*U.D.Tpos.treat+(1-sens)*(U.D.Tneg.notreat))+(1-prev)*((1-spec)*U.noD.Tpos.treat+spec*U.noD.Tneg.notreat )
EU <- c(EU.treat, EU.notreat, EU.test)                     # vector of life expectancies
C<- names(EU) <-  c("treat", "notreat", "test")  # names for the elements of the vector
return(c(EU, C))
}
)
}
prev_range <- seq(0, 1, length.out = 100)
## Generate matrix of inputs for decision tree
m.owsa.input <- cbind(prev = prev_range, input[-1])
m.owsa.input
names(m.owsa.input)
m.owsa.input[1,]
input
prev_range <- seq(0, 1, length.out = 100)
## Generate matrix of inputs for decision tree
m.owsa.input <- cbind(prev = prev_range, input[-1])
## Run model, i.e. evaluate trees repeatedly by using different values for prevalence
outcomes_EU <- t(apply(m.owsa.input, 1, pauker_tree))[,1:3]
data.outcomes_EU <- as.data.frame(outcomes_EU)
data.outcomes_EU
## Run model, i.e. evaluate trees repeatedly by using different values for prevalence
outcomes_EU <- t(apply(m.owsa.input, 1, pauker_tree))[,1:3]
data.outcomes_EU <- as.data.frame(outcomes_EU)
data.outcomes_EU$newcolumn <- prev_range
colnames(data.outcomes_EU) <- c("treat", "notreat", "test", "prevalence")
data.outcomes_EU <- data.frame(apply(data.outcomes_EU, 2, function(x) as.numeric(x)))
data.outcomes_EU
oneway_all <- ggplot(data = data.outcomes_EU, aes(x=prevalence)) + scale_x_continuous(limits=c(0,1)) + scale_y_continuous(limits=c(7,10)) + ggtitle("Expected utility of various strategies as a function of prevalence") +labs(x="prevalence",y="EU")
oneway_all + geom_line(aes(y=treat, colour="treat"))   + geom_line(aes(y=notreat, colour="notreat"))   + geom_line(aes(y=test, colour="test"))
notreat_test <- optim(par = c(0, 1), pauker_threshold,scenario="notreat_test")
test_treat <- optim(par = c(0, 1), pauker_threshold,scenario="test_treat")
print(notreat_test$par) #no treat - test - threshold
print(test_treat$par) #test - treat - thresold
pauker_threshold <- function(param_thr,scenario){
prev <- param_thr
sens <- 0.9
spec <- 0.7
Udec.treat <-0.5
Udec.test <- 0.01
U.D <- 5
U.noD <- 10
U.D.treat <- 9
U.noD.treat <- U.noD  - Udec.treat
U.D.notreat <- U.D
U.noD.notreat <- U.noD
U.D.Tpos.treat <- U.D.treat - Udec.test - Udec.treat
U.noD.Tpos.treat <- U.noD - Udec.treat - Udec.test
U.D.Tneg.notreat <- U.D - Udec.test
U.noD.Tneg.notreat <- U.noD -Udec.test
EU.test <-prev*(sens*U.D.Tpos.treat+(1-sens)*(U.D.Tneg.notreat))+(1-prev)*((1-spec)*U.noD.Tpos.treat+spec*U.noD.Tneg.notreat )
if(scenario=="notreat_test"){
EU.notreat <-prev*(U.D.notreat)+(1-prev)*(U.noD.notreat)
notreat_test <-EU.test - EU.notreat
return(notreat_test[1]^2)}
else{
EU.treat <- prev*(U.D.treat-Udec.treat)+(1-prev)*(U.noD.treat)
test_treat <- EU.treat - EU.test
return(test_treat[1]^2)}
}
#Second, find threshold value by using optim
notreat_test <- optim(par = c(0, 1), pauker_threshold,scenario="notreat_test")
test_treat <- optim(par = c(0, 1), pauker_threshold,scenario="test_treat")
print(notreat_test$par) #no treat - test - threshold
print(test_treat$par) #test - treat - thresold
pauker_tree(input)
input
help(as.matrix)
n <- 10000 #number of iterations
EU.m <- matrix(rep(0,n*3),nrow=n,ncol=3) #matrix to store result from each iteration for each strategy
#assume uniform posterior for all parameters
#sampling values
prev.v <- runif(n,0.05,0.2) # prior probability of disease (prevalence)
sens.v <- runif(n,0.7,0.9) #sensitivity, Pr[T+|D+]
spec.v <- runif(n,0.6,0.8) #speficity, Pr[T-|D-]
Udec.treat.v <-runif(n,0.01,1)
Udec.test.v <- runif(n,0.005,0.02)
U.D.v <- runif(n,2,6)
U.D.treat.v <- runif(n,4,9)
#re-evaluate the tree n times
for(i in 1:n){
prev <- prev.v[i] # prior probability of disease (prevalence)
sens <- sens.v[i] #sensitivity, Pr[T+|D+]
spec <- spec.v[i] #speficity, Pr[T-|D-]
Udec.treat <- Udec.treat.v[i]
Udec.test <- Udec.test.v[i]
U.D <- U.D.v[i]
U.noD <- 10
U.D.treat <- U.D.treat.v[i]
U.noD.treat <- U.noD  - Udec.treat
U.D.notreat <- U.D
U.noD.notreat <- U.noD
U.D.Tpos.treat <- U.D.treat - Udec.test - Udec.treat #true positives
U.noD.Tpos.treat <- U.noD - Udec.treat - Udec.test #false positives
U.D.Tneg.notreat <- U.D - Udec.test #false negatives
U.noD.Tneg.notreat <- U.noD - Udec.test  #true negatives
EU.treat <- prev*(U.D.treat-Udec.treat)+(1-prev)*(U.noD.treat)
EU.notreat <-prev*(U.D.notreat)+(1-prev)*(U.noD.notreat)
EU.test <-prev*(sens*U.D.Tpos.treat+(1-sens)*(U.D.Tneg.notreat))+(1-prev)*((1-spec)*U.noD.Tpos.treat+spec*U.noD.Tneg.notreat )
EU.m[i,] <- c(EU.treat, EU.notreat, EU.test)
}
#calculate the difference between two strategies
diff_notreat_test <- as.data.frame(EU.m[,3]-EU.m[,2])
colnames(diff_notreat_test) <- "test_notreat"
diff_test_treat <- as.data.frame(EU.m[,1]-EU.m[,3])
colnames(diff_test_treat) <- "treat_test"
#draw histogram of the differences using ggplot
histo_diff <- ggplot(data=diff_notreat_test,aes(diff_notreat_test$test_notreat)) + geom_histogram(breaks=seq(-1.5,1.5, by = 0.05), col="red", fill="orange") + labs(title="Histogram of difference in EU between test and no treat") + labs(x="Difference (test-notreat)",y="count")
print(histo_diff)
bb <- function(a){
print(sens)
}
bb(3)
notreat_test <- optim(par = c(0, 1), pauker_threshold,scenario="notreat_test")
test_treat <- optim(par = c(0, 1), pauker_threshold,scenario="test_treat")
print(notreat_test$par) #no treat - test - threshold
print(test_treat$par) #test - treat - thresold
pauker_threshold <- function(param_thr,scenario){
prev <- param_thr
sens <- 0.9
spec <- 0.7
Udec.treat <-0.5
Udec.test <- 0.01
U.D <- 5
U.noD <- 10
U.D.treat <- 9
U.noD.treat <- U.noD  - Udec.treat
U.D.notreat <- U.D
U.noD.notreat <- U.noD
U.D.Tpos.treat <- U.D.treat - Udec.test - Udec.treat
U.noD.Tpos.treat <- U.noD - Udec.treat - Udec.test
U.D.Tneg.notreat <- U.D - Udec.test
U.noD.Tneg.notreat <- U.noD -Udec.test
EU.test <-prev*(sens*U.D.Tpos.treat+(1-sens)*(U.D.Tneg.notreat))+(1-prev)*((1-spec)*U.noD.Tpos.treat+spec*U.noD.Tneg.notreat )
if(scenario=="notreat_test"){
EU.notreat <-prev*(U.D.notreat)+(1-prev)*(U.noD.notreat)
notreat_test <-EU.test - EU.notreat
return(notreat_test[1]^2)}
else{
EU.treat <- prev*(U.D.treat-Udec.treat)+(1-prev)*(U.noD.treat)
test_treat <- EU.treat - EU.test
return(test_treat[1]^2)}
}
pauker_threshold(0.05, "notreat_test")
pauker_threshold(0.05, "test_treat")
pauker_threshold(0.1-, "test_treat")
pauker_threshold(0.10, "test_treat")
pauker_threshold <- function(param_thr,scenario){
prev <- param_thr
sens <- 0.9
spec <- 0.7
Udec.treat <-0.5
Udec.test <- 0.01
U.D <- 5
U.noD <- 10
U.D.treat <- 9
U.noD.treat <- U.noD  - Udec.treat
U.D.notreat <- U.D
U.noD.notreat <- U.noD
U.D.Tpos.treat <- U.D.treat - Udec.test - Udec.treat
U.noD.Tpos.treat <- U.noD - Udec.treat - Udec.test
U.D.Tneg.notreat <- U.D - Udec.test
U.noD.Tneg.notreat <- U.noD -Udec.test
EU.test <-prev*(sens*U.D.Tpos.treat+(1-sens)*(U.D.Tneg.notreat))+(1-prev)*((1-spec)*U.noD.Tpos.treat+spec*U.noD.Tneg.notreat )
if(scenario=="notreat_test"){
EU.notreat <-prev*(U.D.notreat)+(1-prev)*(U.noD.notreat)
notreat_test <-EU.test - EU.notreat
return(notreat_test[1])}
else{
EU.treat <- prev*(U.D.treat-Udec.treat)+(1-prev)*(U.noD.treat)
test_treat <- EU.treat - EU.test
return(test_treat[1])}
}
notreat_test <- optim(par = c(0, 1), pauker_threshold,scenario="notreat_test")
test_treat <- optim(par = c(0, 1), pauker_threshold,scenario="test_treat")
print(notreat_test$par) #no treat - test - threshold
print(test_treat$par) #test - treat - thresold
notreat_test
pauker_threshold <- function(param_thr,scenario){
prev <- param_thr
sens <- 0.9
spec <- 0.7
Udec.treat <-0.5
Udec.test <- 0.01
U.D <- 5
U.noD <- 10
U.D.treat <- 9
U.noD.treat <- U.noD  - Udec.treat
U.D.notreat <- U.D
U.noD.notreat <- U.noD
U.D.Tpos.treat <- U.D.treat - Udec.test - Udec.treat
U.noD.Tpos.treat <- U.noD - Udec.treat - Udec.test
U.D.Tneg.notreat <- U.D - Udec.test
U.noD.Tneg.notreat <- U.noD -Udec.test
EU.test <-prev*(sens*U.D.Tpos.treat+(1-sens)*(U.D.Tneg.notreat))+(1-prev)*((1-spec)*U.noD.Tpos.treat+spec*U.noD.Tneg.notreat )
if(scenario=="notreat_test"){
EU.notreat <-prev*(U.D.notreat)+(1-prev)*(U.noD.notreat)
notreat_test <-EU.test - EU.notreat
return(notreat_test[1]^2)}
else{
EU.treat <- prev*(U.D.treat-Udec.treat)+(1-prev)*(U.noD.treat)
test_treat <- EU.treat - EU.test
return(test_treat[1]^2)}
}
bb <- function(a){
print(sens)
}
#Second, find threshold value by using optim
notreat_test <- optim(par = c(0, 1), pauker_threshold,scenario="notreat_test")
test_treat <- optim(par = c(0, 1), pauker_threshold,scenario="test_treat")
print(notreat_test$par) #no treat - test - threshold
print(test_treat$par) #test - treat - thresold
notreat_test
help(seq)
a <- seq(0.01, 1, length.out = 100)
pauker_threshold(a, scenario = "notreat_test")
a <- seq(0.01, 1, length.out = 100)
pauker_threshold(a, scenario = "notreat_test")
a <- seq(0.01, 1, length.out = 100)
for(i in 1:100){
store[i] <- pauker_threshold(a[i], scenario = "notreat_test")
}
a <- seq(0.01, 1, length.out = 100)
store <- a
for(i in 1:100){
store[i] <- pauker_threshold(a[i], scenario = "notreat_test")
}
store
plot(a, store)
a <- seq(0.01, 2, length.out = 100)
store <- a
for(i in 1:100){
store[i] <- pauker_threshold(a[i], scenario = "notreat_test")
}
plot(a, store)
notreat_test
help(optim)
a <- seq(0.01, 2, length.out = 100)
store <- a
for(i in 1:100){
store[i] <- pauker_threshold(a[i], scenario = "test_treat")
}
plot(a, store)
test_treat <- optim(par = c(0, 1), pauker_threshold,scenario="test_treat")
print(test_treat$par) #test - treat - thresold
pauker_threshold(1.027, scenario = "test_treat")
pauker_threshold(0.48567, scenario = "test_treat")
test_treat
pauker_threshold <- function(param_thr,scenario){
prev <- param_thr
sens <- 0.9
spec <- 0.7
Udec.treat <-0.5
Udec.test <- 0.01
U.D <- 5
U.noD <- 10
U.D.treat <- 9
U.noD.treat <- U.noD  - Udec.treat
U.D.notreat <- U.D
U.noD.notreat <- U.noD
U.D.Tpos.treat <- U.D.treat - Udec.test - Udec.treat
U.noD.Tpos.treat <- U.noD - Udec.treat - Udec.test
U.D.Tneg.notreat <- U.D - Udec.test
U.noD.Tneg.notreat <- U.noD -Udec.test
EU.test <-prev*(sens*U.D.Tpos.treat+(1-sens)*(U.D.Tneg.notreat))+(1-prev)*((1-spec)*U.noD.Tpos.treat+spec*U.noD.Tneg.notreat )
if(scenario=="notreat_test"){
EU.notreat <-prev*(U.D.notreat)+(1-prev)*(U.noD.notreat)
notreat_test <-EU.test - EU.notreat
return(notreat_test[1]^2)}
else{
EU.treat <- prev*(U.D.treat-Udec.treat)+(1-prev)*(U.noD.treat)
test_treat <- EU.treat - EU.test
print("hi")
return(test_treat[1]^2)}
}
notreat_test <- optim(par = c(0, 1), pauker_threshold,scenario="notreat_test")
test_treat <- optim(par = c(0, 1), pauker_threshold,scenario="test_treat")
notreat_test <- optim(par = 0, pauker_threshold,scenario="notreat_test")
notreat_test <- optim(par = c(0,0.5), pauker_threshold,scenario="notreat_test")
notreat_test
notreat_test <- optim(par = c(-1,1), pauker_threshold,scenario="notreat_test")
notreat_tets
notreat_test
notreat_test <- optim(par = c(0), pauker_threshold,scenario="notreat_test")
notreat_test <- optim(par = c(0.01), pauker_threshold,scenario="notreat_test")
notreat_test <- optim(par = 0.01, pauker_threshold,scenario="notreat_test")
notreat_test <- optim(par = c(0,0.1), pauker_threshold,scenario="notreat_test")
notreat_test
notreat_test <- optim(par = c(0,0), pauker_threshold,scenario="notreat_test")
notreat_test
notreat_test <- optim( pauker_threshold,scenario="notreat_test")
notreat_test <- optim( pauker_threshold,scenario="notreat_test", method = "Brent")
notreat_test <- optim(par = c(0,1), pauker_threshold,scenario="notreat_test", method = "Brent")
notreat_test <- optim(par = 0, pauker_threshold,scenario="notreat_test", method = "Brent")
notreat_test <- optim(par = c(0,1), pauker_threshold,scenario="notreat_test", method = "Nelder-Mead")
notreat_test
pauker_threshold(a[i], scenario = "notreat_test")
pauker_threshold(1, scenario = "notreat_test")
pauker_threshold(1.1257, scenario = "notreat_test")
notreat_test <- optim(par = c(0, 2), pauker_threshold,scenario="notreat_test", method = "Brent")
notreat_test <- optim(par = c(0, 2), pauker_threshold,scenario="notreat_test")
notreat_test
notreat_test <- optim(par = c(-2, 2), pauker_threshold,scenario="notreat_test")
notreat_test
notreat_test <- optim(par = c(-2, 5), pauker_threshold,scenario="notreat_test")
notreat_test
optim(par = c(0,0.1), pauker_threshold,scenario="notreat_test", hessian = TRUE)
optim(par = c(0,0), pauker_threshold,scenario="notreat_test", hessian = TRUE)
optim(par = 0, pauker_threshold,scenario="notreat_test")
optim(pauker_threshold,scenario="notreat_test")
optim(par = 0, pauker_threshold,scenario="notreat_test")
help(optimize)
# Deterministic Decision Model
strategies <- c("Urgent Appendectomy", "Non-operative Management")
terminalNodes <- c("Urgent Appendectomy", "Antibiotic Failure", "Recurrent Appendicitis", "Success",  "Interval Appendectomy")
### Hartwich data
# Outcomes in Non-operative management group (NOM)
af <- c(3, 21)              # Failure of antibiotics
ra <- c(2,19)               # Recurrent symptoms after discharge
ia <- c(2, 17)              # Proportion of non-recurrent patients getting elective appendectomy
outcomes <- matrix(c(af, ra, ia), byrow=TRUE, ncol=2,
dimnames = list(c("af", "ra", "ia"), c("yes", "no")))
outcomes
probs <- prop.table(outcomes, margin=1)[,1]
probs
# Create a cost/utility matrix where rows represent terminal nodes, columns are child utilities, parent utilities and costs
u_child <- c(0.854, 0.808, 0.724, 0.928, 0.748)  # Directly from Figure 1
u_parent <- c(0.856, 0.832, 0.724, 0.904, 0.652) # Also from Figure 1
costs <- c(4130, 8049, 5046, 1365, 5702)
UC_obs <- cbind(u_child, u_parent, costs) # Matrix rows represent: child utilities, parent utilities and cost for each terminal node
row.names(UC_obs) <- terminalNodes
UC_obs
p1 <- c(p.NOMaf, 1 - p.NOMaf); p2 <- c(p.NOMra, 1-p.NOMra); p3 <- c(1-p.NOMia, p.NOMia)
Z1 <- matrix(c(1,0,0,0,
0,1,1,1), byrow=TRUE, ncol=4)
Z2 <- matrix(c(0,1,0,0,
0,0,1,1), byrow=TRUE, ncol=4)
Z3 <- matrix( c(0,0,1,0,
0,0,0,1), byrow=TRUE, ncol=4)
p1
p1
# Deterministic Decision Model
strategies <- c("Urgent Appendectomy", "Non-operative Management")
terminalNodes <- c("Urgent Appendectomy", "Antibiotic Failure", "Recurrent Appendicitis", "Success",  "Interval Appendectomy")
### Hartwich data
# Outcomes in Non-operative management group (NOM)
af <- c(3, 21)              # Failure of antibiotics
ra <- c(2,19)               # Recurrent symptoms after discharge
ia <- c(2, 17)              # Proportion of non-recurrent patients getting elective appendectomy
outcomes <- matrix(c(af, ra, ia), byrow=TRUE, ncol=2,
dimnames = list(c("af", "ra", "ia"), c("yes", "no")))
outcomes
# Calculate conditional probabilities directly from data
probs <- prop.table(outcomes, margin=1)[,1]
p.NOMaf <- probs[1]; p.NOMra <- probs[2]; p.NOMia <- probs[3]
# Create a cost/utility matrix where rows represent terminal nodes, columns are child utilities, parent utilities and costs
u_child <- c(0.854, 0.808, 0.724, 0.928, 0.748)  # Directly from Figure 1
u_parent <- c(0.856, 0.832, 0.724, 0.904, 0.652) # Also from Figure 1
costs <- c(4130, 8049, 5046, 1365, 5702)
UC_obs <- cbind(u_child, u_parent, costs) # Matrix rows represent: child utilities, parent utilities and cost for each terminal node
row.names(UC_obs) <- terminalNodes
# Table of Utilities and Costs
### TODO: Use method described in SMDM poster by Petros
# Attempt to use: https://smdm.confex.com/smdm/2017/meetingapp.cgi/Paper/11035
### FIXME: I don't get the correct answer!
p1 <- c(p.NOMaf, 1 - p.NOMaf); p2 <- c(p.NOMra, 1-p.NOMra); p3 <- c(1-p.NOMia, p.NOMia)
Z1 <- matrix(c(1,0,0,0,
0,1,1,1), byrow=TRUE, ncol=4)
Z2 <- matrix(c(0,1,0,0,
0,0,1,1), byrow=TRUE, ncol=4)
Z3 <- matrix( c(0,0,1,0,
0,0,0,1), byrow=TRUE, ncol=4)
p1
Z1
Z2
Z3
p1 %*% Z1
UC_obs
outcomes
UC_obs
Z1
Z2
Z3
p1
p2
p3
probs <- prop.table(outcomes, margin=1)[,1]
p.NOMaf <- probs[1]; p.NOMra <- probs[2]; p.NOMia <- probs[3]
probs
probs
Z1
p1 %*% Z1
p2 %*% Z2
p3 %*% Z3
(p1 %*% Z1) * (p2 %*% Z2)
p1 <- c(p.NOMaf, 1 - p.NOMaf); p2 <- c(p.NOMra, 1-p.NOMra); p3 <- c(1-p.NOMia, p.NOMia)
Z1 <- matrix(c(1,0,0,0,
0,1,1,1), byrow=TRUE, ncol=4)
Z2 <- matrix(c(1,1,0,0,
1,0,1,1), byrow=TRUE, ncol=4)
Z3 <- matrix( c(1,0,1,0,
1,0,0,1), byrow=TRUE, ncol=4)
EV_k2 <- ( (p1 %*% Z1) * (p2 %*% Z2) * (p3 %*% Z3) ) %*% UC_obs[2:5,]
EV_k2
UC_obs
tree_nom <- c(prod(c(p.NOMaf)), prod(c(1 - p.NOMaf, p.NOMra)), prod(c(1 - p.NOMaf, 1 - p.NOMra, 1  - p.NOMia)), prod(c(1 - p.NOMaf, 1 - p.NOMra, p.NOMia)))
nom <- (tree_nom %*% UC_obs[2:5,])
nom
p1 <- c(p.NOMaf, 1 - p.NOMaf); p2 <- c(p.NOMra, 1-p.NOMra); p3 <- c(1-p.NOMia, p.NOMia)
Z1 <- matrix(c(1,0,0,0,
0,1,1,1), byrow=TRUE, ncol=4)
Z2 <- matrix(c(1,1,0,0,
1,0,1,1), byrow=TRUE, ncol=4)
Z3 <- matrix( c(1,1,1,0,
1,1,0,1), byrow=TRUE, ncol=4)
EV_k2 <- ( (p1 %*% Z1) * (p2 %*% Z2) * (p3 %*% Z3) ) %*% UC_obs[2:5,]
EV_k2
p1 <- c(p.NOMaf, 1 - p.NOMaf); p2 <- c(p.NOMra, 1-p.NOMra); p3 <- c(1-p.NOMia, p.NOMia)
Z1 <- matrix(c(1,0,0,0,
0,1,1,1), byrow=TRUE, ncol=4)
Z2 <- matrix(c(1,1,0,0,
1,0,1,1), byrow=TRUE, ncol=4)
Z3 <- matrix( c(1,1,1,0,
1,1,0,1), byrow=TRUE, ncol=4)
EV_k2 <- ( (p1 %*% Z1) * (p2 %*% Z2) * (p3 %*% Z3) ) %*% UC_obs[2:5,]
EV_k2
Outcomes <- c(10, 18, 5, 8, 46, 61, 5, 16, 26, 37, 816, 866, 55, 109, 112, 130, 619, 692, 71, 81, 325, 345, 321, 325, 54, 77, 6, 6, 211, 136, 47, 47, 34, 39, 6, 27, 394, 406, 997, 1421)
N <- c(297, 308, 30, 44, 105, 108, 10, 17, 40, 38, 1060, 902, 71, 139, 138, 140, 737, 764, 82, 83, 375, 384, 363, 361, 56, 80, 12, 12, 211, 136, 56, 58, 38, 41, 50, 47, 469, 482, 1545, 1583)
Treat <- c(1, 2, 1, 5, 1, 3, 1, 4, 1, 4, 1, 7, 1, 2, 1, 7, 1, 5, 1, 3, 1, 2, 1, 4, 1, 2, 4, 6, 4, 6, 3, 4, 2, 3, 2, 5, 4, 6, 4, 7)
Treat[Treat == 1] = "Treatment A"
Treat[Treat == 2] = "Treatment B"
Treat[Treat == 3] = "Hahaha Treatment"
Treat[Treat == 4] = "Blah Blah Treatment"
Study <- rep(1:20, each = 2)
network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial") #Model 0
network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial", baseline = "common") #Model A1
network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial", baseline = "common", baseline.risk = "exchangeable") #Model A2
#doesn't converge
#network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial", baseline = "exchangeable") #Model B1
#network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial", baseline = "exchangeable", baseline.risk = "exchangeable") #Model B2
result <- network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Outcomes <- c(10, 18, 5, 8, 46, 61, 5, 16, 26, 37, 816, 866, 55, 109, 112, 130, 619, 692, 71, 81, 325, 345, 321, 325, 54, 77, 6, 6, 211, 136, 47, 47, 34, 39, 6, 27, 394, 406, 997, 1421)
N <- c(297, 308, 30, 44, 105, 108, 10, 17, 40, 38, 1060, 902, 71, 139, 138, 140, 737, 764, 82, 83, 375, 384, 363, 361, 56, 80, 12, 12, 211, 136, 56, 58, 38, 41, 50, 47, 469, 482, 1545, 1583)
Treat <- c(1, 2, 1, 5, 1, 3, 1, 4, 1, 4, 1, 7, 1, 2, 1, 7, 1, 5, 1, 3, 1, 2, 1, 4, 1, 2, 4, 6, 4, 6, 3, 4, 2, 3, 2, 5, 4, 6, 4, 7)
Treat[Treat == 1] = "Treatment A"
Treat[Treat == 2] = "Treatment B"
Treat[Treat == 3] = "Hahaha Treatment"
Treat[Treat == 4] = "Blah Blah Treatment"
Study <- rep(1:20, each = 2)
network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial") #Model 0
network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial", baseline = "common") #Model A1
network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial", baseline = "common", baseline.risk = "exchangeable") #Model A2
#doesn't converge
#network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial", baseline = "exchangeable") #Model B1
#network <- network.data(Outcomes = Outcomes, Treat = Treat, Study = Study, N = N, response = "binomial", baseline = "exchangeable", baseline.risk = "exchangeable") #Model B2
result <- network.run(network)
summary(result)
help(network.run)
result <- network.run(network, extra.pars.save = "delta")
summary(result)
str(result)
str(result$samples)
str(result$samples[[1]])
names(result$samples[[1]])
dimnames(result$samples[[1]])
network.summary
summary(result, extra.pars = "delta")
network.forest.plot(result)
Outcomes <- c(15, 146, 4, 80, 9, 28, 19, 81, 5, 37, 1, 23, 33, 110, 22, 61, 0, 15, 5, 5, 14, 26, 22, 90)
N <- c(199, 393, 127, 246, 63, 65, 200, 207, 62, 67, 30, 59, 363, 360, 110, 165, 47, 49, 40, 40, 49, 50, 204, 205)
Study <- c("RAPID 1", "RAPID 1", "RAPID 2", "RAPID 2", "Kim 2007", "Kim 2007", "DE019", "DE019", "ARMADA", "ARMADA", "Weinblatt 1999", "Weinblatt 1999", "START", "START", "ATTEST", "ATTEST", "Abe 2006", "Abe 2006", "Strand 2006", "Strand 2006", "CHARISMA", "CHARISMA", "OPTION", "OPTION")
Treat <- c("Placebo", "CZP", "Placebo", "CZP", "Placebo", "Adalimumab", "Placebo", "Adalimumab", "Placebo", "Adalimumab", "Placebo", "Etanercept", "Placebo", "Infliximab", "Placebo", "Infliximab", "Placebo", "Infliximab", "Placebo", "Rituximab", "Placebo", "Tocilizumab", "Placebo", "Tocilizumab")
covariate <- c(6.15, 5.85, 6.85, 10.95, 11.65, 13, 8.1, 7.85, 8.3, 11.25, 0.915, 7.65)
Treat.order <- c("Placebo", "CZP", "Adalimumab", "Etanercept", "Infliximab", "Rituximab", "Tocilizumab")
network <- network.data(Outcomes, Study, Treat, N=N, response = "binomial", Treat.order = Treat.order)
network <- network.data(Outcomes, Study, Treat, N=N, response = "binomial", Treat.order = Treat.order, hy.prior = list("dhnorm", 0, 9.77))
#covariate
network <- network.data(Outcomes, Study, Treat, N=N, response = "binomial", Treat.order = Treat.order, covariate = covariate, hy.prior = list("dhnorm", 0, 9.77), covariate.model = "exchangeable")
network <- network.data(Outcomes, Study, Treat, N=N, response = "binomial", Treat.order = Treat.order, covariate = covariate)
result <- network.run(network)
network.covariate.plot(result)
network.covariate.plot(result, base.treatment = "Placebo")
network.covariate.plot(result, base.treatment = "Placebo", comparison.treatment = "CZP")
help(window)
library(devtools)
install_github("MikeJSeo/nof1", force = TRUE)
library(nof1)
#if the data is from 0:10, add 1 to make it 1:11
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 11, baseline = "Usual Routine", response = "ordinal")
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
#250 height for aspect ratio
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
cardiovascular
blocker
library(gemtc)
smoking
smoking$treatments
str(smoking)
smoking$data.ab
setwd("C:/Users/Michael Seo/Desktop/GitHub/network-meta")
devtools::document()
devtools::document()
