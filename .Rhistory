library(mcnet)
parkinsons_contrast
parkinsons_contrast
library(devtools)
install_github("MikeJSeo/nof1", force = TRUE)
library(nof1)
library(scales)
library(ggplot2)
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
result <- nof1.run(nof1)
nof1.dat
a
nof1.data
library(devtools)
install_github("MikeJSeo/nof1", force = TRUE)
library(nof1)
library(scales)
library(ggplot2)
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
summary(result$samples)
xport
nof1.ordinal.simulation2 <- function(alpha = 0, beta_B = -0.5, cut = c(-0.5, 0.3, 0.5, 0.8, 1), ncat = 5){
#cut = c(-0.5,-0.4,-0.2,-0.1,0.1, 0.2, 0.7, 0.9, 1, 1.1, 1.3), ncat = 11){
inv_logit <- function(a){
1/(1+exp(-a))
}
Treat <-  rep(c("A", "B", "A", "B", "A", "B"), each = 3)
nobs <- length(Treat)
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- alpha
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat)
}
## new data
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
summary(result$samples)
## new data
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
summary(result$samples)
nof1.ordinal.simulation2 <- function(alpha = 0, beta_B = 2, cut = c(-0.5, 0.3, 0.5, 0.8, 1), ncat = 5){
#cut = c(-0.5,-0.4,-0.2,-0.1,0.1, 0.2, 0.7, 0.9, 1, 1.1, 1.3), ncat = 11){
inv_logit <- function(a){
1/(1+exp(-a))
}
Treat <-  rep(c("A", "B", "A", "B", "A", "B"), each = 3)
nobs <- length(Treat)
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- alpha
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat)
}
## new data
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
summary(result$samples)
## new data
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
nof1.ordinal.simulation2 <- function(alpha = 0, beta_B = 1, cut = c(-2, -1, 0.5, 0.8, 2), ncat = 5){
#cut = c(-0.5,-0.4,-0.2,-0.1,0.1, 0.2, 0.7, 0.9, 1, 1.1, 1.3), ncat = 11){
inv_logit <- function(a){
1/(1+exp(-a))
}
Treat <-  rep(c("A", "B", "A", "B", "A", "B"), each = 3)
nobs <- length(Treat)
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- alpha
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat)
}
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
summary(result$samples)
exp(-0.96)
nof1.ordinal.simulation2 <- function(alpha = 0, beta_B = 1, cut = c(-2,-1.5,-1,-0.5,0, 0.5, 1, 1.5, 2, 2.1, 2.3), ncat = 11){
inv_logit <- function(a){
1/(1+exp(-a))
}
Treat <-  rep(c("A", "B", "A", "B", "A", "B"), each = 3)
nobs <- length(Treat)
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- alpha
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat)
}
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 11, baseline = "Usual Routine", response = "ordinal")
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
summary(result$samples)
exp(c(-0.11607 , 1.573 ,  3.3606 ))
date <- as.Date(timestamp, timestamp.format)
data <- data.frame(Y = as.numeric(nof1$Y), Treatment = gsub("\\_", " ", nof1$Treat), date = date)
data2 <- aggregate(nof1$Y, list(Treatment = gsub("\\_", " ", nof1$Treat)), mean)
ggplot(data, aes(x=date, Y, fill = Treatment)) + geom_bar(stat = "identity")  + facet_grid(. ~ Treatment) + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(x = "Date", y = Outcome.name) +
geom_hline(data = data2, aes(yintercept = x, linetype = "Mean"), color="black")
Outcome.name = "stress"
date <- as.Date(timestamp, timestamp.format)
data <- data.frame(Y = as.numeric(nof1$Y), Treatment = gsub("\\_", " ", nof1$Treat), date = date)
data2 <- aggregate(nof1$Y, list(Treatment = gsub("\\_", " ", nof1$Treat)), mean)
ggplot(data, aes(x=date, Y, fill = Treatment)) + geom_bar(stat = "identity")  + facet_grid(. ~ Treatment) + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(x = "Date", y = Outcome.name) +
geom_hline(data = data2, aes(yintercept = x, linetype = "Mean"), color="black")
ggplot(data, aes(x=date, Y, fill = Treatment)) + geom_bar(stat = "identity")  + facet_grid(. ~ Treatment) + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(x = "Date", y = Outcome.name) +
geom_hline(data = data2, aes(yintercept = x, linetype = "Mean"), color="black") + theme(plot.title = element_text(hjust = 0.5))
date <- as.Date(timestamp, timestamp.format)
data <- data.frame(Y = as.numeric(nof1$Y), Treatment = gsub("\\_", " ", nof1$Treat), date = date)
data2 <- aggregate(nof1$Y, list(Treatment = gsub("\\_", " ", nof1$Treat)), mean)
ggplot(data, aes(x=date, Y, fill = Treatment)) + geom_bar(stat = "identity")  + facet_grid(. ~ Treatment) + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(x = "Date", y = Outcome.name) +
geom_hline(data = data2, aes(yintercept = x, linetype = "Mean"), color="black")
ggplot(data, aes(x=date, Y, fill = Treatment)) + geom_bar(stat = "identity")  + facet_grid(. ~ Treatment) + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(x = "Date", y = Outcome.name) +
geom_hline(data = data2, aes(yintercept = x, linetype = "Mean"), color="black") +
scale_y_continuous(breaks = 0:nof1$ncat, oob = rescale_none, label = c("Low", rep("", length = nof1$ncat -1), "High")) +
scale_fill_manual(values=c("#adc2eb", "#ffb380")) +
scale_linetype_manual(name = "", values = 1, guide = guide_legend(override.aes = list(color = c("black"))))
ggplot(data, aes(x=date, Y, fill = Treatment)) + geom_bar(stat = "identity")  + facet_grid(. ~ Treatment) + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(x = "Date", y = Outcome.name) + geom_hline(data = data2, aes(yintercept = x, linetype = "Mean"), color="black") +
scale_y_continuous(breaks = 0:nof1$ncat, oob = rescale_none, label = c("Low", rep("", length = nof1$ncat -1), "High")) +
scale_fill_manual(values=c("#adc2eb", "#ffb380")) + scale_linetype_manual(name = "", values = 1, guide = guide_legend(override.aes = list(color = c("black"))))
library(nof1)
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
Y
Treat
data
Y
nof1.ordinal.simulation2 <- function(alpha = 0, beta_B = 1, cut = c(-2,-1.5,-1,-0.5,0, 0.5, 1, 1.5, 2, 2.1, 2.3), ncat = 11){
inv_logit <- function(a){
1/(1+exp(-a))
}
Treat <-  rep(c("A", "B", "A", "B", "A", "B"), each = 3)
nobs <- length(Treat)
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- alpha
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat)
}
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 11, baseline = "Usual Routine", response = "ordinal")
cat(nof1$code)
Y
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 11, baseline = "Usual Routine", response = "ordinal")
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
calculate.contrast.deviance
calculate.contrast.deviance(result)
contrast.network.deviance.plot(result)
setwd("C:/Users/Michael Seo/Desktop/GitHub/network-meta")
devtools::document(0)
devtools::document()
contrast.network.deviance.plot(result)
contrast.network.leverage.plot(result)
contrast.inits(network, 3)
contrast.inits(network, 34)
network.gelman.diag(result)
network.autocorr.diag(result)
relative.effects(result)
relative.effects.table(result)
network.forest.plot(result)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
summary(result)
rank.tx(result)
network.rank.tx.plot(result)
network.cumrank.tx.plot(result)
sucra(result)
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
network$code
cat(network$code)
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
str(network)
remove(list = ls())
library(mcnet)
parkinsons_contrast
