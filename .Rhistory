q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- alpha
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat)
}
## new data
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
summary(result$samples)
## new data
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
nof1.ordinal.simulation2 <- function(alpha = 0, beta_B = 1, cut = c(-2, -1, 0.5, 0.8, 2), ncat = 5){
#cut = c(-0.5,-0.4,-0.2,-0.1,0.1, 0.2, 0.7, 0.9, 1, 1.1, 1.3), ncat = 11){
inv_logit <- function(a){
1/(1+exp(-a))
}
Treat <-  rep(c("A", "B", "A", "B", "A", "B"), each = 3)
nobs <- length(Treat)
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- alpha
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat)
}
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 5, baseline = "Usual Routine", response = "ordinal")
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
summary(result$samples)
exp(-0.96)
nof1.ordinal.simulation2 <- function(alpha = 0, beta_B = 1, cut = c(-2,-1.5,-1,-0.5,0, 0.5, 1, 1.5, 2, 2.1, 2.3), ncat = 11){
inv_logit <- function(a){
1/(1+exp(-a))
}
Treat <-  rep(c("A", "B", "A", "B", "A", "B"), each = 3)
nobs <- length(Treat)
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- alpha
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat)
}
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 11, baseline = "Usual Routine", response = "ordinal")
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
summary(result$samples)
exp(c(-0.11607 , 1.573 ,  3.3606 ))
date <- as.Date(timestamp, timestamp.format)
data <- data.frame(Y = as.numeric(nof1$Y), Treatment = gsub("\\_", " ", nof1$Treat), date = date)
data2 <- aggregate(nof1$Y, list(Treatment = gsub("\\_", " ", nof1$Treat)), mean)
ggplot(data, aes(x=date, Y, fill = Treatment)) + geom_bar(stat = "identity")  + facet_grid(. ~ Treatment) + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(x = "Date", y = Outcome.name) +
geom_hline(data = data2, aes(yintercept = x, linetype = "Mean"), color="black")
Outcome.name = "stress"
date <- as.Date(timestamp, timestamp.format)
data <- data.frame(Y = as.numeric(nof1$Y), Treatment = gsub("\\_", " ", nof1$Treat), date = date)
data2 <- aggregate(nof1$Y, list(Treatment = gsub("\\_", " ", nof1$Treat)), mean)
ggplot(data, aes(x=date, Y, fill = Treatment)) + geom_bar(stat = "identity")  + facet_grid(. ~ Treatment) + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(x = "Date", y = Outcome.name) +
geom_hline(data = data2, aes(yintercept = x, linetype = "Mean"), color="black")
ggplot(data, aes(x=date, Y, fill = Treatment)) + geom_bar(stat = "identity")  + facet_grid(. ~ Treatment) + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(x = "Date", y = Outcome.name) +
geom_hline(data = data2, aes(yintercept = x, linetype = "Mean"), color="black") + theme(plot.title = element_text(hjust = 0.5))
date <- as.Date(timestamp, timestamp.format)
data <- data.frame(Y = as.numeric(nof1$Y), Treatment = gsub("\\_", " ", nof1$Treat), date = date)
data2 <- aggregate(nof1$Y, list(Treatment = gsub("\\_", " ", nof1$Treat)), mean)
ggplot(data, aes(x=date, Y, fill = Treatment)) + geom_bar(stat = "identity")  + facet_grid(. ~ Treatment) + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(x = "Date", y = Outcome.name) +
geom_hline(data = data2, aes(yintercept = x, linetype = "Mean"), color="black")
ggplot(data, aes(x=date, Y, fill = Treatment)) + geom_bar(stat = "identity")  + facet_grid(. ~ Treatment) + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(x = "Date", y = Outcome.name) +
geom_hline(data = data2, aes(yintercept = x, linetype = "Mean"), color="black") +
scale_y_continuous(breaks = 0:nof1$ncat, oob = rescale_none, label = c("Low", rep("", length = nof1$ncat -1), "High")) +
scale_fill_manual(values=c("#adc2eb", "#ffb380")) +
scale_linetype_manual(name = "", values = 1, guide = guide_legend(override.aes = list(color = c("black"))))
ggplot(data, aes(x=date, Y, fill = Treatment)) + geom_bar(stat = "identity")  + facet_grid(. ~ Treatment) + theme_bw() +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black")) +
labs(x = "Date", y = Outcome.name) + geom_hline(data = data2, aes(yintercept = x, linetype = "Mean"), color="black") +
scale_y_continuous(breaks = 0:nof1$ncat, oob = rescale_none, label = c("Low", rep("", length = nof1$ncat -1), "High")) +
scale_fill_manual(values=c("#adc2eb", "#ffb380")) + scale_linetype_manual(name = "", values = 1, guide = guide_legend(override.aes = list(color = c("black"))))
library(nof1)
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
Y
Treat
data
Y
nof1.ordinal.simulation2 <- function(alpha = 0, beta_B = 1, cut = c(-2,-1.5,-1,-0.5,0, 0.5, 1, 1.5, 2, 2.1, 2.3), ncat = 11){
inv_logit <- function(a){
1/(1+exp(-a))
}
Treat <-  rep(c("A", "B", "A", "B", "A", "B"), each = 3)
nobs <- length(Treat)
Y <- epsilon <- mu <- rep(NA, nobs)
q <- matrix(0, nrow = length(Treat), ncol = ncat - 1)
p <- matrix(0, nrow = nobs, ncol = ncat)
for(i in 1:nobs){
mu[i] <- alpha
if(Treat[i] == "B"){
mu[i] <- mu[i] + beta_B
}
for(r in 1:(ncat-1)){
q[i,r] <- inv_logit(mu[i] - cut[r])
}
p[i,1] <- 1 - q[i,1]
for(r in 2:(ncat-1)){
p[i,r] <- q[i,r-1] - q[i,r]
}
p[i,ncat] <- q[i,(ncat-1)]
Y[i] <- sample(1:ncat, size = 1,  prob = p[i,])
}
list(Y = Y, Treat = Treat)
}
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 11, baseline = "Usual Routine", response = "ordinal")
cat(nof1$code)
Y
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
nof1.ordinal.simulation2()
data <- nof1.ordinal.simulation2()
Treat <- ifelse(data$Treat == "A", "Usual Routine", "Laughter")
Y <- data$Y
nof1 <- nof1.data(Y, Treat, ncat = 11, baseline = "Usual Routine", response = "ordinal")
result <- nof1.run(nof1)
timestamp <- seq(as.Date('2015-01-01'),as.Date('2016-01-31'), length.out = length(data$Y))
time_series_plot2(nof1, timestamp = timestamp, timestamp.format = "%m-%d-%Y", Outcome.name = "Stress")
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
cat(network$code)
dev <- lapply(samples, function(x) { x[,grep("resdev\\[", dimnames(samples[[1]])[[2]])]})
network <- result$network
samples <- result$samples
totresdev <- lapply(samples, function(x){ x[,"totresdev"]})
Dbar <- mean(unlist(totresdev))
#posterior mean of residual deviance
dev <- lapply(samples, function(x) { x[,grep("resdev\\[", dimnames(samples[[1]])[[2]])]})
dev <- do.call(rbind, dev)
dev <- apply(dev, 2, mean)
dev_matrix <- matrix(NA, nrow =  network$nstudy, ncol = max(network$na))
#posterior mean of residual deviance
resdev <- lapply(samples, function(x) { x[,grep("resdev\\[", dimnames(samples[[1]])[[2]])]})
resdev <- do.call(rbind, resdev)
resdev <- apply(resdev, 2, mean)
resdev_matrix <- matrix(NA, nrow =  network$nstudy, ncol = max(network$na))
for(i in 1:dim(resdev_matrix)[1]){
for(j in 1:dim(resdev_matrix)[2]){
ind <- which(paste("resdev[", i, ",", j, "]", sep = "") == names(resdev))
if(length(ind) != 0){
resdev_matrix[i,j] <- resdev[ind]
}
}
}
resdev_study <- resdev_matrix
resdev_study
resdev <- lapply(samples, function(x) { x[,grep("resdev\\[", dimnames(samples[[1]])[[2]])]})
resdeve
resdev
dimnames(samples[[1]])
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
network <- result$network
samples <- result$samples
totresdev <- lapply(samples, function(x){ x[,"totresdev"]})
Dbar <- mean(unlist(totresdev))
#posterior mean of residual deviance
resdev <- lapply(samples, function(x) { x[,grep("resdev\\[", dimnames(samples[[1]])[[2]])]})
resdev <- do.call(rbind, resdev)
resdev <- apply(resdev, 2, mean)
resdev_matrix <- matrix(NA, nrow =  network$nstudy, ncol = max(network$na))
for(i in 1:dim(resdev_matrix)[1]){
for(j in 1:dim(resdev_matrix)[2]){
ind <- which(paste("resdev[", i, ",", j, "]", sep = "") == names(resdev))
if(length(ind) != 0){
resdev_matrix[i,j] <- resdev[ind]
}
}
}
resdev_study <- resdev_matrix
resdev_study
dimnames(samples[[1]])
resdev <- lapply(samples, function(x) { x[,grep("resdev\\[", dimnames(samples[[1]])[[2]])]})
resdev
resdev <- do.call(rbind, resdev)
resdev <- apply(resdev, 2, mean)
resdev
resdev <- lapply(samples, function(x) { x[,grep("resdev\\[", dimnames(samples[[1]])[[2]])]})
resdev <- do.call(rbind, resdev)
resdev_study <- apply(resdev, 2, mean)
resdev_study
#posterior mean of residual deviance
resdev <- lapply(samples, function(x) { x[,grep("resdev\\[", dimnames(samples[[1]])[[2]])]})
resdev <- do.call(rbind, resdev)
resdev_study <- apply(resdev, 2, mean)
#devtilda - deviance at the posterior mean of the fitted values
ybar <- lapply(samples, function(x){ x[,grep("delta\\[", dimnames(samples[[1]])[[2]])] })
ybar <- do.call(rbind, ybar)
ybar <- apply(ybar, 2, mean)
ybar_study <- devtilda_study <- rep(NA, network$nstudy)
with(network, {
# 2 arm
for(i in 1:na_count[1]){
r_value <- Outcomes[i,2]
se_value <- SE[i,2]
ybar_study[i] <- ybar[which(paste("delta[", i, ",", 2, "]", sep = "") == names(ybar))]
devtilda_study[i] <- ifelse(se_value != 0, (r_value - ybar_study[i])^2 / se_value^2, 0)
}
# 3 arm or more
if(length(na_count) > 1){
for(ii in 2:length(na_count)){
for(i in (cumsum(na_count)[ii-1]+1): cumsum(na_count)[ii]){
Sigma <- matrix(V[i], na[i] - 1, na[i] - 1)
diag(Sigma) <- SE[i, 2:na[i]]
omega_value <- solve(Sigma)
r_value <- Outcomes[i,2:na[i]]
ybar_arm <- ybar[grepl(paste0(i, ","), names(ybar), fixed=TRUE)]
ybar_arm <- ybar_arm[!grepl(paste0(",", 1), names(ybar_arm), fixed = TRUE)] #get rid of the delta[,1] column if it exists
devtilda_study[i] <- (r_value - ybar_arm) %*% omega_value %*% (r_value - ybar_arm)
}
}
}
pd <- Dbar - sum(devtilda_study)
#posterior mean of residual deviance
resdev <- lapply(samples, function(x) { x[,grep("resdev\\[", dimnames(samples[[1]])[[2]])]})
resdev <- do.call(rbind, resdev)
resdev_study <- apply(resdev, 2, mean)
#devtilda - deviance at the posterior mean of the fitted values
ybar <- lapply(samples, function(x){ x[,grep("delta\\[", dimnames(samples[[1]])[[2]])] })
ybar <- do.call(rbind, ybar)
ybar <- apply(ybar, 2, mean)
ybar_study <- devtilda_study <- rep(NA, network$nstudy)
with(network, {
# 2 arm
for(i in 1:na_count[1]){
r_value <- Outcomes[i,2]
se_value <- SE[i,2]
ybar_study[i] <- ybar[which(paste("delta[", i, ",", 2, "]", sep = "") == names(ybar))]
devtilda_study[i] <- ifelse(se_value != 0, (r_value - ybar_study[i])^2 / se_value^2, 0)
}
# 3 arm or more
if(length(na_count) > 1){
for(ii in 2:length(na_count)){
for(i in (cumsum(na_count)[ii-1]+1): cumsum(na_count)[ii]){
Sigma <- matrix(V[i], na[i] - 1, na[i] - 1)
diag(Sigma) <- SE[i, 2:na[i]]
omega_value <- solve(Sigma)
r_value <- Outcomes[i,2:na[i]]
ybar_arm <- ybar[grepl(paste0(i, ","), names(ybar), fixed=TRUE)]
ybar_arm <- ybar_arm[!grepl(paste0(",", 1), names(ybar_arm), fixed = TRUE)] #get rid of the delta[,1] column if it exists
devtilda_study[i] <- (r_value - ybar_arm) %*% omega_value %*% (r_value - ybar_arm)
}
}
}
pd <- Dbar - sum(devtilda_study)
DIC <- pd + Dbar
#leverage_arm <- dev_arm - devtilda_arm
#pD <- sum(leverage_arm, na.rm = TRUE)
#DIC <- Dbar + pD
return(list(Dbar = Dbar, pd = pd, DIC = DIC, resdev_study = resdev_study, devtilda_study = devtilda_study))
})
with(network, {
# 2 arm
for(i in 1:na_count[1]){
r_value <- Outcomes[i,2]
se_value <- SE[i,2]
ybar_study[i] <- ybar[which(paste("delta[", i, ",", 2, "]", sep = "") == names(ybar))]
devtilda_study[i] <- ifelse(se_value != 0, (r_value - ybar_study[i])^2 / se_value^2, 0)
}
# 3 arm or more
if(length(na_count) > 1){
for(ii in 2:length(na_count)){
for(i in (cumsum(na_count)[ii-1]+1): cumsum(na_count)[ii]){
Sigma <- matrix(V[i], na[i] - 1, na[i] - 1)
diag(Sigma) <- SE[i, 2:na[i]]
omega_value <- solve(Sigma)
r_value <- Outcomes[i,2:na[i]]
ybar_arm <- ybar[grepl(paste0(i, ","), names(ybar), fixed=TRUE)]
ybar_arm <- ybar_arm[!grepl(paste0(",", 1), names(ybar_arm), fixed = TRUE)] #get rid of the delta[,1] column if it exists
devtilda_study[i] <- (r_value - ybar_arm) %*% omega_value %*% (r_value - ybar_arm)
}
}
}
#pd <- Dbar - sum(devtilda_study)
#DIC <- pd + Dbar
leverage_arm <- dev_arm - devtilda_arm
pD <- sum(leverage_arm, na.rm = TRUE)
DIC <- Dbar + pD
return(list(Dbar = Dbar, pd = pd, DIC = DIC, resdev_study = resdev_study, devtilda_study = devtilda_study))
})
network <- result$network
samples <- result$samples
totresdev <- lapply(samples, function(x){ x[,"totresdev"]})
Dbar <- mean(unlist(totresdev))
#posterior mean of residual deviance
resdev <- lapply(samples, function(x) { x[,grep("resdev\\[", dimnames(samples[[1]])[[2]])]})
resdev <- do.call(rbind, resdev)
resdev_study <- apply(resdev, 2, mean)
#devtilda - deviance at the posterior mean of the fitted values
ybar <- lapply(samples, function(x){ x[,grep("delta\\[", dimnames(samples[[1]])[[2]])] })
ybar <- do.call(rbind, ybar)
ybar <- apply(ybar, 2, mean)
ybar_study <- devtilda_study <- rep(NA, network$nstudy)
with(network, {
# 2 arm
for(i in 1:na_count[1]){
r_value <- Outcomes[i,2]
se_value <- SE[i,2]
ybar_study[i] <- ybar[which(paste("delta[", i, ",", 2, "]", sep = "") == names(ybar))]
devtilda_study[i] <- ifelse(se_value != 0, (r_value - ybar_study[i])^2 / se_value^2, 0)
}
# 3 arm or more
if(length(na_count) > 1){
for(ii in 2:length(na_count)){
for(i in (cumsum(na_count)[ii-1]+1): cumsum(na_count)[ii]){
Sigma <- matrix(V[i], na[i] - 1, na[i] - 1)
diag(Sigma) <- SE[i, 2:na[i]]
omega_value <- solve(Sigma)
r_value <- Outcomes[i,2:na[i]]
ybar_arm <- ybar[grepl(paste0(i, ","), names(ybar), fixed=TRUE)]
ybar_arm <- ybar_arm[!grepl(paste0(",", 1), names(ybar_arm), fixed = TRUE)] #get rid of the delta[,1] column if it exists
devtilda_study[i] <- (r_value - ybar_arm) %*% omega_value %*% (r_value - ybar_arm)
}
}
}
#pd <- Dbar - sum(devtilda_study)
#DIC <- pd + Dbar
leverage_arm <- resdev_study - devtilda_study
pD <- sum(leverage_arm, na.rm = TRUE)
DIC <- Dbar + pD
return(list(Dbar = Dbar, pd = pd, DIC = DIC, resdev_study = resdev_study, devtilda_study = devtilda_study))
})
with(network, {
# 2 arm
for(i in 1:na_count[1]){
r_value <- Outcomes[i,2]
se_value <- SE[i,2]
ybar_study[i] <- ybar[which(paste("delta[", i, ",", 2, "]", sep = "") == names(ybar))]
devtilda_study[i] <- ifelse(se_value != 0, (r_value - ybar_study[i])^2 / se_value^2, 0)
}
# 3 arm or more
if(length(na_count) > 1){
for(ii in 2:length(na_count)){
for(i in (cumsum(na_count)[ii-1]+1): cumsum(na_count)[ii]){
Sigma <- matrix(V[i], na[i] - 1, na[i] - 1)
diag(Sigma) <- SE[i, 2:na[i]]
omega_value <- solve(Sigma)
r_value <- Outcomes[i,2:na[i]]
ybar_arm <- ybar[grepl(paste0(i, ","), names(ybar), fixed=TRUE)]
ybar_arm <- ybar_arm[!grepl(paste0(",", 1), names(ybar_arm), fixed = TRUE)] #get rid of the delta[,1] column if it exists
devtilda_study[i] <- (r_value - ybar_arm) %*% omega_value %*% (r_value - ybar_arm)
}
}
}
#pD <- Dbar - sum(devtilda_study)
#DIC <- pD + Dbar
leverage_study <- resdev_study - devtilda_study
pD <- sum(leverage_study, na.rm = TRUE)
DIC <- Dbar + pD
return(list(Dbar = Dbar, pD = pD, DIC = DIC, resdev_study = resdev_study, devtilda_study = devtilda_study))
})
setwd("C:/Users/Michael Seo/Desktop/GitHub/network-meta")
devtools::document()
setwd("C:/Users/Michael Seo/Desktop/GitHub/network-meta")
library(devtools)
install_github("MikeJSeo/network-meta", force = TRUE)
library(mcnet)
Treat <- matrix(c(1, 1, 3, 3, 4, 4, 1, 3, 2, 4, 4, 5, 5, 2, NA, NA, NA, NA, NA, NA, 4), ncol = 3)
Outcomes <- matrix(c(-0.31, -1.7, -0.35, 0.55, -0.3, -0.3, -2.3, NA, NA, NA, NA, NA, NA, -0.9), ncol = 2)
SE <- matrix(c(0.67, 0.38, 0.44, 0.56, 0.27, 0.32, 0.72, NA, NA, NA, NA, NA, NA, 0.69), ncol = 2)
na <- c(2, 2, 2, 2, 2, 2, 3)
V <- c(NA, NA, NA, NA, NA, NA, 0.25)
parkinsons_contrast <- list(Outcomes = Outcomes, Treat = Treat, SE = SE, na = na, V = V)
############
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V, type = "random", mean.d = 0.01, prec.d = 0.1, hy.prior = list("dhnorm", 0.01, 0.01))
})
result <- contrast.network.run(network)
result$deviance
network <- with(parkinsons_contrast, {
contrast.network.data(Outcomes, Treat, SE, na, V)
})
result <- contrast.network.run(network)
contrast.network.deviance.plot(result)
deviance <- result$deviance
deviance$resdev_study
contrast.network.deviance.plot <- function(result){
deviance <- result$deviance
dev_vector <- deviance$resdev_study
dev_vector <- dev_vector[!is.na(dev_vector)]
plot(1:result$network$nstudy, dev_vector, xlab = "Study", ylab = "Residual Deviance", main = "Per-study residual deviance")
}
contrast.network.deviance.plot(result)
deviance <- result$deviance
dev <- sqrt(apply(deviance$resdev_study, 1, mean, na.rm = TRUE))
dev <- sqrt(deviance$resdev_study, na.rm = TRUE)
help(sqrt)
deviance <- result$deviance
resdev <- sqrt(deviance$resdev_study)
leverage <- deviance$leverage_study
plot(resdev, leverage, xlim = c(0, max(c(resdev, 2.5))), ylim = c(0, max(c(leverage,4))),
xlab = "Square root of residual deviance", ylab = "Leverage", main = "Leverage versus residual deviance")
mtext("Per-study mean per-datapoint contribution")
contrast.network.leverage.plot <- function(result){
deviance <- result$deviance
resdev <- sqrt(deviance$resdev_study)
leverage <- deviance$leverage_study
plot(resdev, leverage, xlim = c(0, max(c(resdev, 2.5))), ylim = c(0, max(c(leverage,4))),
xlab = "Square root of residual deviance", ylab = "Leverage", main = "Leverage versus residual deviance")
}
contrast.network.leverage.plot(result)
